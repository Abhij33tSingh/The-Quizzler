[{"E:\\The-Quizzler\\The-Quizzler\\ClientSide\\src\\index.js":"1","E:\\The-Quizzler\\The-Quizzler\\ClientSide\\src\\App.jsx":"2","E:\\The-Quizzler\\The-Quizzler\\ClientSide\\src\\components\\LoginPage.jsx":"3","E:\\The-Quizzler\\The-Quizzler\\ClientSide\\src\\components\\AttemptQuiz.jsx":"4","E:\\The-Quizzler\\The-Quizzler\\ClientSide\\src\\components\\RegisterPage.jsx":"5","E:\\The-Quizzler\\The-Quizzler\\ClientSide\\src\\components\\Profile.jsx":"6","E:\\The-Quizzler\\The-Quizzler\\ClientSide\\src\\components\\HomePage.jsx":"7","E:\\The-Quizzler\\The-Quizzler\\ClientSide\\src\\components\\CreateQuizPage.jsx":"8","E:\\The-Quizzler\\The-Quizzler\\ClientSide\\src\\components\\QuizCreated.jsx":"9","E:\\The-Quizzler\\The-Quizzler\\ClientSide\\src\\components\\PastResultsPage.jsx":"10","E:\\The-Quizzler\\The-Quizzler\\ClientSide\\src\\components\\AttempterResults.jsx":"11","E:\\The-Quizzler\\The-Quizzler\\ClientSide\\src\\components\\ListOfQuizzes.jsx":"12","E:\\The-Quizzler\\The-Quizzler\\ClientSide\\src\\components\\QuestionBox.jsx":"13","E:\\The-Quizzler\\The-Quizzler\\ClientSide\\src\\components\\SelectQuiz.jsx":"14","E:\\The-Quizzler\\The-Quizzler\\ClientSide\\src\\hooks\\usebasic-input.jsx":"15","E:\\The-Quizzler\\The-Quizzler\\ClientSide\\src\\components\\QuizDetail.jsx":"16","E:\\The-Quizzler\\The-Quizzler\\ClientSide\\src\\components\\AddQuestion.jsx":"17","E:\\The-Quizzler\\The-Quizzler\\ClientSide\\src\\components\\AboutUs.jsx":"18"},{"size":249,"mtime":1637560757339,"results":"19","hashOfConfig":"20"},{"size":2146,"mtime":1637663690452,"results":"21","hashOfConfig":"20"},{"size":3515,"mtime":1637560757327,"results":"22","hashOfConfig":"20"},{"size":3248,"mtime":1637560757324,"results":"23","hashOfConfig":"20"},{"size":3921,"mtime":1637560757333,"results":"24","hashOfConfig":"20"},{"size":3201,"mtime":1637661534337,"results":"25","hashOfConfig":"20"},{"size":2890,"mtime":1637658233210,"results":"26","hashOfConfig":"20"},{"size":6550,"mtime":1637658233209,"results":"27","hashOfConfig":"20"},{"size":2495,"mtime":1637660800834,"results":"28","hashOfConfig":"20"},{"size":2740,"mtime":1637658233211,"results":"29","hashOfConfig":"20"},{"size":1147,"mtime":1637663944203,"results":"30","hashOfConfig":"20"},{"size":3040,"mtime":1637663468783,"results":"31","hashOfConfig":"20"},{"size":750,"mtime":1637560757331,"results":"32","hashOfConfig":"20"},{"size":696,"mtime":1637560757334,"results":"33","hashOfConfig":"20"},{"size":620,"mtime":1637560757337,"results":"34","hashOfConfig":"20"},{"size":714,"mtime":1637647074982,"results":"35","hashOfConfig":"20"},{"size":5723,"mtime":1637560757322,"results":"36","hashOfConfig":"20"},{"size":2513,"mtime":1637658233196,"results":"37","hashOfConfig":"20"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"t7xn4h",{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"44","messages":"45","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"51","messages":"52","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"59","messages":"60","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"72","messages":"73","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"E:\\The-Quizzler\\The-Quizzler\\ClientSide\\src\\index.js",[],"E:\\The-Quizzler\\The-Quizzler\\ClientSide\\src\\App.jsx",[],"E:\\The-Quizzler\\The-Quizzler\\ClientSide\\src\\components\\LoginPage.jsx",[],"E:\\The-Quizzler\\The-Quizzler\\ClientSide\\src\\components\\AttemptQuiz.jsx",["78","79","80","81","82","83"],"import React from \"react\";\r\nimport { useEffect, useState, Fragment } from \"react\";\r\nimport Axios from \"axios\";\r\nimport { useNavigate, useParams, Link } from \"react-router-dom\";\r\nimport QuestionBox from \"./QuestionBox\";\r\n\r\nvar year = new Date();\r\nyear = year.getFullYear();\r\n\r\nfunction AttemptQuiz(props) {\r\n  const [state, setState] = useState(\"live\");\r\n  const isLoggedIn = props.loggedIn;\r\n  const navigate = useNavigate();\r\n  const [score, setScore] = useState(0);\r\n  const [response, setResponse] = useState(0);\r\n  const [allQues, setQues] = useState([]);\r\n  const [a, setA] = useState([]);\r\n  const params = useParams();\r\n  var s = 0;\r\n\r\n  const submitHandler = async () => {\r\n    if (response === a.length) {\r\n      setState(\"done\");\r\n\r\n      await Axios.post(\r\n        \"http://localhost:3001/updateUserQuizzesCompleted/\" + params.id,\r\n        {\r\n          quizId: params.id2,\r\n          marksScored: score,\r\n        }\r\n      );\r\n    }\r\n  };\r\n\r\n  const computedAnswer = (answer, correct) => {\r\n    console.log(answer, correct);\r\n    if (answer === correct) {\r\n      s++;\r\n      setScore(score + 1);\r\n    }\r\n    setResponse(response + 1);\r\n  };\r\n  useEffect(() => {\r\n    Axios.get(\"http://localhost:3001/getAllQuizzes\").then((response) => {\r\n      for (let i = 0; i < response.data.length; i++) {\r\n        if (response.data[i]._id === params.id2) {\r\n          setQues(response.data[i]);\r\n          setA(response.data[i].allQuestions);\r\n          break;\r\n        }\r\n      }\r\n\r\n      //WE ARE GETTING ALL OF OUR QUIZZES IN response\r\n    });\r\n  }, []);\r\n  const q = Object.values(allQues);\r\n  if (true) {\r\n    return (\r\n      <div>\r\n        <header>\r\n          <h1 onMouseDown={() => navigate(\"/homepage/\")}>Quizzler</h1>\r\n        </header>\r\n\r\n        <div className=\"AttemptPage\">\r\n          <div className=\"AttemptQuizTitle\">\r\n            <h1>{allQues.title}</h1>\r\n          </div>\r\n          <h4>\r\n            <div>\r\n              {state === \"live\" && (\r\n                <div>\r\n                  {a.map((q) => (\r\n                    <div className=\"QuestionContainer\">\r\n                      <QuestionBox\r\n                        question={q.Question}\r\n                        option1={q.option1}\r\n                        option2={q.option2}\r\n                        option3={q.option3}\r\n                        option4={q.option4}\r\n                        selected={(answer) => computedAnswer(answer, q.Answer)}\r\n                      />\r\n                    </div>\r\n                  ))}\r\n                  <div className=\"AttemptSubmit\">\r\n                    <button className=\"SubmitButton\" onClick={submitHandler}>\r\n                      {\" \"}\r\n                      Submit\r\n                    </button>\r\n                  </div>\r\n                </div>\r\n              )}\r\n              {response === a.length && state === \"done\" ? (\r\n                <h2>\r\n                  Your score is - {score} / {a.length}\r\n                </h2>\r\n              ) : null}\r\n            </div>\r\n          </h4>\r\n        </div>\r\n        <footer className=\"AttemptFooter\">\r\n          <p> CopyrightÂ© {year} </p>{\" \"}\r\n        </footer>\r\n      </div>\r\n    );\r\n  }\r\n  // navigate(\"/login\");   NAVIGATE IS NOT WORKING!??\r\n}\r\n\r\nexport default AttemptQuiz;\r\n","E:\\The-Quizzler\\The-Quizzler\\ClientSide\\src\\components\\RegisterPage.jsx",[],"E:\\The-Quizzler\\The-Quizzler\\ClientSide\\src\\components\\Profile.jsx",[],"E:\\The-Quizzler\\The-Quizzler\\ClientSide\\src\\components\\HomePage.jsx",["84","85"],"import React from \"react\";\r\nimport { useEffect, useState } from \"react\";\r\nimport Axios from \"axios\";\r\nimport { useParams, useNavigate } from \"react-router-dom\";\r\nimport SelectQuiz from \"./SelectQuiz\";\r\n\r\nvar year = new Date();\r\nyear = year.getFullYear();\r\n\r\nfunction HomePage(props) {\r\n  const [isLoggedIn, setIsLoggedIn] = useState(props.loggedIn);\r\n\r\n  // const id = props.id;\r\n  const [name, setName] = useState(\"\");\r\n  const [allQuizzes, setAllQuizzes] = useState({});\r\n  const navigate = useNavigate();\r\n  const params = useParams();\r\n\r\n  useEffect(() => {\r\n    Axios.get(\"http://localhost:3001/getUser/\" + params.id).then(\r\n      (response) => {\r\n        setName(response.data.name);\r\n      }\r\n      //WE ARE GETTING ALL OF OUR USER DATA IN response.data\r\n    );\r\n\r\n    Axios.get(\"http://localhost:3001/getAllQuizzes\").then((response) => {\r\n      setAllQuizzes(response.data);\r\n\r\n      //WE ARE GETTING ALL OF OUR QUIZZES IN response\r\n    });\r\n\r\n    if (params.id == undefined) {\r\n      setIsLoggedIn(false);\r\n    } else {\r\n      setIsLoggedIn(true);\r\n    }\r\n  }, []);\r\n  const q = Object.values(allQuizzes);\r\n  if (true) {\r\n    return (\r\n      <div>\r\n        <header>\r\n          <h1 onMouseDown={() => navigate(\"/homepage/\" + params.id)}>\r\n            Quizzler\r\n          </h1>\r\n          <div className=\"navbarItems\">\r\n            <nav onClick={() => navigate(\"/createquiz/\" + params.id)}>\r\n              Create a Quiz\r\n            </nav>\r\n            <nav onClick={() => navigate(\"/AboutUs/\" + params.id)}>\r\n              About us\r\n            </nav>\r\n\r\n            <nav\r\n              className=\"UserName\"\r\n              onMouseDown={() => {\r\n                navigate(\"/profile/\" + params.id);\r\n              }}\r\n            >\r\n              {name}\r\n            </nav>\r\n            {/* <nav>\r\n              {!isLoggedIn && (\r\n                <div className=\"Signup\">\r\n                  <button\r\n                    onClick={() => {\r\n                      return <div> {navigate(\"/register\")}</div>;\r\n                    }}\r\n                  >\r\n                    Sign Up\r\n                  </button>\r\n                </div>\r\n              )}\r\n            </nav> */}\r\n          </div>\r\n        </header>\r\n        <div className=\"HomePage\">\r\n          <div>{console.log(q)}</div>\r\n          <div className=\"QuizContent\">\r\n            {q.map((q, key) => {\r\n              return (\r\n                <div>\r\n                  <SelectQuiz\r\n                    key={key}\r\n                    q={q}\r\n                    isLoggedIn={isLoggedIn}\r\n                    id={params.id}\r\n                  />\r\n                </div>\r\n              );\r\n            })}\r\n          </div>\r\n        </div>\r\n        <footer>\r\n          <p> CopyrightÂ© {year} </p>{\" \"}\r\n        </footer>\r\n      </div>\r\n    );\r\n  }\r\n  // navigate(\"/login\"); NAVIGATE IS NOT WORKING!??\r\n}\r\n\r\nexport default HomePage;\r\n","E:\\The-Quizzler\\The-Quizzler\\ClientSide\\src\\components\\CreateQuizPage.jsx",["86","87","88","89"],"import AddQuestion from \"./AddQuestion\";\r\nimport { useState, useEffect } from \"react\";\r\nimport useBasicInput from \"../hooks/usebasic-input\";\r\nimport React from \"react\";\r\nimport Axios from \"axios\";\r\nimport { useParams, useNavigate } from \"react-router-dom\";\r\n//import QuestionCard from \"./QuestionCard\";\r\n\r\nvar year = new Date();\r\nyear = year.getFullYear();\r\n\r\nconst CreateQuizPage = () => {\r\n  const navigate = useNavigate();\r\n  const params = useParams();\r\n  const [userData, setUserData] = useState({});\r\n\r\n  useEffect(() => {\r\n    Axios.get(\"http://localhost:3001/getUser/\" + params.id).then((response) => {\r\n      setUserData(response.data);\r\n    });\r\n  }, []);\r\n  const [allQutions, addques] = useState([]);\r\n  var x = 0;\r\n  var t = \"public\";\r\n  let quizCreatedId = \"\";\r\n  const Quiztype = (e) => {\r\n    t = e.target.value;\r\n  };\r\n  const data = (Q) => {\r\n    const item = Q;\r\n    addques([...allQutions, item]);\r\n    x++;\r\n    console.log(x);\r\n    //console.log(allQutions);\r\n  };\r\n  const {\r\n    value: title,\r\n    valueChangeHandler: titleChangeHandler,\r\n    valueIsValid: titleIsValid,\r\n    onBlurHandler: titleBlurHandler,\r\n    inputTouched: titleInputTouched,\r\n    reset: titleReset,\r\n  } = useBasicInput((value) => value.trim().length !== 0);\r\n\r\n  const {\r\n    value: Description,\r\n    valueChangeHandler: DescriptionChangeHandler,\r\n    valueIsValid: DescriptionIsValid,\r\n    onBlurHandler: DescriptionBlurHandler,\r\n    inputTouched: DescriptionInputTouched,\r\n    reset: DescriptionReset,\r\n  } = useBasicInput((value) => value.trim().length !== 0);\r\n\r\n  const submissionHandler = async (e) => {\r\n    e.preventDefault();\r\n    if (!formIsValid) {\r\n      return;\r\n    }\r\n    await Axios.post(\"http://localhost:3001/postQuiz\", {\r\n      title: title,\r\n      description: Description,\r\n      t: t,\r\n      allQuestions: allQutions,\r\n      userId: userData._id,\r\n    });\r\n\r\n    await Axios.get(\"http://localhost:3001/getAllQuizzes\").then((response) => {\r\n      response.data.map((val) => {\r\n        if (val.userId === userData._id && val.title === title) {\r\n          quizCreatedId = val._id;\r\n        }\r\n      });\r\n    });\r\n\r\n    await Axios.post(\r\n      \"http://localhost:3001/updateUserQuizzesCreated/\" + userData._id,\r\n      {\r\n        quizId: quizCreatedId,\r\n      }\r\n    );\r\n\r\n    await Axios.get(\"http://localhost:3001/getAllQuizzes\").then((response) => {\r\n      response.data.map((data) => {\r\n        if (data.description === Description && data.title === title) {\r\n          navigate(\"/quizCreated/\" + data._id);\r\n          return;\r\n        }\r\n      });\r\n    });\r\n\r\n    DescriptionReset();\r\n    titleReset();\r\n    //console.log(des.quizDescription, des.quizTitle);\r\n  };\r\n\r\n  const DescriptionInputClasses =\r\n    !DescriptionIsValid && DescriptionInputTouched ? \"invalid\" : \"\";\r\n  const titleInputClasses = !titleIsValid && titleInputTouched ? \"invalid\" : \"\";\r\n  const formIsValid =\r\n    DescriptionIsValid && titleIsValid && allQutions.length >= 1;\r\n\r\n  return (\r\n    <div>\r\n      <header>\r\n        <h1 onMouseDown={() => navigate(\"/homepage/\" + params.id)}>Quizzler</h1>\r\n        <div className=\"navbarItems\">\r\n          <nav\r\n            onClick={() => {\r\n              return (\r\n                <div>\r\n                  {\r\n                    navigate(\"/homepage/\" + params.id)\r\n                    //console.log(props.q.allQuestions)\r\n                  }\r\n                </div>\r\n              );\r\n            }}\r\n          >\r\n            Attempt a Quiz\r\n          </nav>\r\n          <nav onClick={() => navigate(\"/AboutUs/\" + params.id)}>About us</nav>\r\n          <nav>{userData.name}</nav>\r\n        </div>\r\n      </header>\r\n      <div className=\"CreateQuizPage\">\r\n        <form onSubmit={submissionHandler}>\r\n          <div className=\"QuizInfoContainer\">\r\n            <div className={`form-control ${titleInputClasses}`}>\r\n              <label className=\"quizTitle\">Quiz Title</label>\r\n              <br />\r\n              <input\r\n                type=\"textarea\"\r\n                value={title}\r\n                onBlur={titleBlurHandler}\r\n                onChange={titleChangeHandler}\r\n                className=\"quizTitleInput\"\r\n              />\r\n              <br />\r\n            </div>\r\n            <div className={`form-control ${DescriptionInputClasses}`}>\r\n              <label className=\"quizDescription\">Quiz Description</label>\r\n              <br />\r\n              <textarea\r\n                value={Description}\r\n                onBlur={DescriptionBlurHandler}\r\n                onChange={DescriptionChangeHandler}\r\n                className=\"quizDescriptionInput\"\r\n                rows=\"30\"\r\n                cols=\"70\"\r\n              />\r\n              <br />\r\n            </div>\r\n            <div className={`form-control`} onClick={Quiztype}>\r\n              <div className=\"Quiztype\">\r\n                <div className=\"PrivateRadio\">\r\n                  <label>Private</label>\r\n                  <input\r\n                    className=\"RadioInput\"\r\n                    type=\"radio\"\r\n                    name=\"quiz-type\"\r\n                    value=\"private\"\r\n                  />\r\n                </div>\r\n                <div className=\"PublicRadio\">\r\n                  <label>Public</label>\r\n                  <input\r\n                    className=\"RadioInput\"\r\n                    type=\"radio\"\r\n                    name=\"quiz-type\"\r\n                    value=\"public\"\r\n                    checked\r\n                  />\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div className={`form-control`}>\r\n            {allQutions.length >= 1 && (\r\n              <div className=\"QuizInfoContainer\">\r\n                {allQutions.map((q, key) => (\r\n                  <div>\r\n                    Question {key + 1}) {q.Question}\r\n                  </div>\r\n                ))}\r\n              </div>\r\n            )}\r\n            <section>\r\n              {\r\n                <div className=\"QuestionCard\">\r\n                  <strong>Question</strong>\r\n                  <br></br>\r\n                  <br></br>\r\n\r\n                  <AddQuestion data={data} />\r\n                </div>\r\n              }\r\n            </section>\r\n          </div>\r\n          <div>\r\n            <button className=\"form-actions\" type=\"submit\" value=\"Create Quiz\">\r\n              {\" \"}\r\n              Create Quiz !\r\n            </button>\r\n          </div>\r\n        </form>\r\n      </div>\r\n      <footer>\r\n        <p> CopyrightÂ© {year} </p>{\" \"}\r\n      </footer>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CreateQuizPage;\r\n","E:\\The-Quizzler\\The-Quizzler\\ClientSide\\src\\components\\QuizCreated.jsx",[],"E:\\The-Quizzler\\The-Quizzler\\ClientSide\\src\\components\\PastResultsPage.jsx",["90","91"],"import { useParams, useNavigate } from \"react-router-dom\";\r\nimport { useEffect, useState } from \"react\";\r\nimport Axios from \"axios\";\r\nimport QuizDetail from \"./QuizDetail\";\r\n\r\nconst PastResultsPage = () => {\r\n  const params = useParams();\r\n  const [userData, setData] = useState([]);\r\n  const navigate = useNavigate();\r\n\r\n  useEffect(() => {\r\n    Axios.get(\"http://localhost:3001/getUser/\" + params.id).then((response) => {\r\n      setData(response.data);\r\n      console.log(response.data);\r\n    });\r\n  }, []);\r\n\r\n  return (\r\n    <div>\r\n      <header>\r\n        <h1 onClick={() => navigate(\"/homepage/\" + params.id)}>Quizzler</h1>\r\n\r\n        <div className=\"ProfilenavbarItems\">\r\n          <nav onClick={() => navigate(\"/createquiz/\" + params.id)}>\r\n            Create a Quiz\r\n          </nav>\r\n          <nav onClick={() => navigate(\"/AboutUs/\" + params.id)}>About us</nav>\r\n          <nav>Start Quiz</nav>\r\n          <nav onClick={() => navigate(\"/Profile/\" + params.id)}>\r\n            {userData.name}\r\n          </nav>\r\n        </div>\r\n      </header>\r\n      <div className=\"QuizContent\">\r\n        {userData.quizzesCompleted && (\r\n          <div>\r\n            <h1 id='title'>Past Results</h1>\r\n            <table id = \"Results\">\r\n                  <tbody>\r\n                  <tr>\r\n                  <td>\r\n                      <h3>s/no</h3>\r\n                  </td>\r\n                  <td>\r\n                      <h3>Quiz Title</h3>\r\n                  </td>\r\n                  <td>\r\n                      <h3>score</h3>\r\n                  </td>\r\n                  </tr>\r\n                  {userData.quizzesCompleted.map((q, key) => (\r\n                  <tr key = {key}>\r\n                    <td> \r\n                      {\" \"}\r\n                      {key + 1} \r\n                    </td>\r\n                    <td>\r\n                      {<QuizDetail quizId={q.quizId} />}\r\n                    </td>\r\n                    <td>\r\n                      ({q.marksScored})/{<QuizMarks quizId={q.quizId}/>}\r\n                    </td>\r\n                  </tr>\r\n            ))}\r\n             </tbody>\r\n        </table>\r\n          </div>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\nconst QuizMarks = (props) =>{\r\n\r\n  const [quiz,setQuiz] = useState([]);\r\n  useEffect(() => {\r\n      Axios.get(\"http://localhost:3001/getAllQuizzes\").then((response) =>{\r\n          for (let i = 0; i < response.data.length; i++)\r\n          {\r\n            if(props.quizId === response.data[i]._id)\r\n            {\r\n                  setQuiz([response.data[i].allQuestions.length])\r\n                  break;\r\n            }\r\n          }\r\n        }\r\n        );\r\n    }, []);\r\n\r\n  return (\r\n      <span> {quiz} </span>\r\n          \r\n  )\r\n}\r\nexport default PastResultsPage;\r\n","E:\\The-Quizzler\\The-Quizzler\\ClientSide\\src\\components\\AttempterResults.jsx",["92"],"E:\\The-Quizzler\\The-Quizzler\\ClientSide\\src\\components\\ListOfQuizzes.jsx",[],"E:\\The-Quizzler\\The-Quizzler\\ClientSide\\src\\components\\QuestionBox.jsx",[],"E:\\The-Quizzler\\The-Quizzler\\ClientSide\\src\\components\\SelectQuiz.jsx",[],"E:\\The-Quizzler\\The-Quizzler\\ClientSide\\src\\hooks\\usebasic-input.jsx",[],"E:\\The-Quizzler\\The-Quizzler\\ClientSide\\src\\components\\QuizDetail.jsx",["93"],"E:\\The-Quizzler\\The-Quizzler\\ClientSide\\src\\components\\AddQuestion.jsx",[],"E:\\The-Quizzler\\The-Quizzler\\ClientSide\\src\\components\\AboutUs.jsx",[],{"ruleId":"94","severity":1,"message":"95","line":2,"column":31,"nodeType":"96","messageId":"97","endLine":2,"endColumn":39},{"ruleId":"94","severity":1,"message":"98","line":4,"column":34,"nodeType":"96","messageId":"97","endLine":4,"endColumn":38},{"ruleId":"94","severity":1,"message":"99","line":12,"column":9,"nodeType":"96","messageId":"97","endLine":12,"endColumn":19},{"ruleId":"94","severity":1,"message":"100","line":19,"column":7,"nodeType":"96","messageId":"97","endLine":19,"endColumn":8},{"ruleId":"101","severity":1,"message":"102","line":55,"column":6,"nodeType":"103","endLine":55,"endColumn":8,"suggestions":"104"},{"ruleId":"94","severity":1,"message":"105","line":56,"column":9,"nodeType":"96","messageId":"97","endLine":56,"endColumn":10},{"ruleId":"106","severity":1,"message":"107","line":33,"column":19,"nodeType":"108","messageId":"109","endLine":33,"endColumn":21},{"ruleId":"101","severity":1,"message":"110","line":38,"column":6,"nodeType":"103","endLine":38,"endColumn":8,"suggestions":"111"},{"ruleId":"101","severity":1,"message":"110","line":21,"column":6,"nodeType":"103","endLine":21,"endColumn":8,"suggestions":"112"},{"ruleId":"113","severity":1,"message":"114","line":68,"column":31,"nodeType":"115","messageId":"116","endLine":68,"endColumn":33},{"ruleId":"113","severity":1,"message":"117","line":83,"column":32,"nodeType":"115","messageId":"118","endLine":83,"endColumn":34},{"ruleId":"113","severity":1,"message":"114","line":86,"column":11,"nodeType":"119","messageId":"120","endLine":86,"endColumn":18},{"ruleId":"101","severity":1,"message":"110","line":16,"column":6,"nodeType":"103","endLine":16,"endColumn":8,"suggestions":"121"},{"ruleId":"101","severity":1,"message":"122","line":88,"column":8,"nodeType":"103","endLine":88,"endColumn":10,"suggestions":"123"},{"ruleId":"101","severity":1,"message":"124","line":15,"column":6,"nodeType":"103","endLine":15,"endColumn":8,"suggestions":"125"},{"ruleId":"101","severity":1,"message":"122","line":20,"column":10,"nodeType":"103","endLine":20,"endColumn":12,"suggestions":"126"},"no-unused-vars","'Fragment' is defined but never used.","Identifier","unusedVar","'Link' is defined but never used.","'isLoggedIn' is assigned a value but never used.","'s' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'params.id2'. Either include it or remove the dependency array.","ArrayExpression",["127"],"'q' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","React Hook useEffect has a missing dependency: 'params.id'. Either include it or remove the dependency array.",["128"],["129"],"array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","Array.prototype.map() expects a value to be returned at the end of arrow function.","expectedAtEnd","ReturnStatement","expectedReturnValue",["130"],"React Hook useEffect has a missing dependency: 'props.quizId'. Either include it or remove the dependency array.",["131"],"React Hook useEffect has a missing dependency: 'params.quizId'. Either include it or remove the dependency array.",["132"],["133"],{"desc":"134","fix":"135"},{"desc":"136","fix":"137"},{"desc":"136","fix":"138"},{"desc":"136","fix":"139"},{"desc":"140","fix":"141"},{"desc":"142","fix":"143"},{"desc":"140","fix":"144"},"Update the dependencies array to be: [params.id2]",{"range":"145","text":"146"},"Update the dependencies array to be: [params.id]",{"range":"147","text":"148"},{"range":"149","text":"148"},{"range":"150","text":"148"},"Update the dependencies array to be: [props.quizId]",{"range":"151","text":"152"},"Update the dependencies array to be: [params.quizId]",{"range":"153","text":"154"},{"range":"155","text":"152"},[1550,1552],"[params.id2]",[1070,1072],"[params.id]",[661,663],[505,507],[2638,2640],"[props.quizId]",[484,486],"[params.quizId]",[612,614]]