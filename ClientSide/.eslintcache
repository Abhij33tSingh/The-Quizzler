[{"C:\\Users\\Abhijeet\\Desktop\\New folder\\The-Quizzler\\ClientSide\\src\\index.js":"1","C:\\Users\\Abhijeet\\Desktop\\New folder\\The-Quizzler\\ClientSide\\src\\App.jsx":"2","C:\\Users\\Abhijeet\\Desktop\\New folder\\The-Quizzler\\ClientSide\\src\\components\\CreateQuizPage.jsx":"3","C:\\Users\\Abhijeet\\Desktop\\New folder\\The-Quizzler\\ClientSide\\src\\components\\LoginPage.jsx":"4","C:\\Users\\Abhijeet\\Desktop\\New folder\\The-Quizzler\\ClientSide\\src\\components\\QuizCreated.jsx":"5","C:\\Users\\Abhijeet\\Desktop\\New folder\\The-Quizzler\\ClientSide\\src\\components\\HomePage.jsx":"6","C:\\Users\\Abhijeet\\Desktop\\New folder\\The-Quizzler\\ClientSide\\src\\components\\Profile.jsx":"7","C:\\Users\\Abhijeet\\Desktop\\New folder\\The-Quizzler\\ClientSide\\src\\components\\RegisterPage.jsx":"8","C:\\Users\\Abhijeet\\Desktop\\New folder\\The-Quizzler\\ClientSide\\src\\components\\AttemptQuiz.jsx":"9","C:\\Users\\Abhijeet\\Desktop\\New folder\\The-Quizzler\\ClientSide\\src\\components\\AddQuestion.jsx":"10","C:\\Users\\Abhijeet\\Desktop\\New folder\\The-Quizzler\\ClientSide\\src\\components\\SelectQuiz.jsx":"11","C:\\Users\\Abhijeet\\Desktop\\New folder\\The-Quizzler\\ClientSide\\src\\components\\QuestionBox.jsx":"12","C:\\Users\\Abhijeet\\Desktop\\New folder\\The-Quizzler\\ClientSide\\src\\hooks\\usebasic-input.jsx":"13","C:\\Users\\Abhijeet\\Desktop\\New folder\\The-Quizzler\\ClientSide\\src\\components\\PastResultsPage.jsx":"14"},{"size":249,"mtime":1637408069329,"results":"15","hashOfConfig":"16"},{"size":1883,"mtime":1637409921341,"results":"17","hashOfConfig":"16"},{"size":6475,"mtime":1637408069323,"results":"18","hashOfConfig":"16"},{"size":3515,"mtime":1637408069324,"results":"19","hashOfConfig":"16"},{"size":486,"mtime":1637408069326,"results":"20","hashOfConfig":"16"},{"size":2618,"mtime":1637408069324,"results":"21","hashOfConfig":"16"},{"size":2195,"mtime":1637409606066,"results":"22","hashOfConfig":"16"},{"size":3921,"mtime":1637408069327,"results":"23","hashOfConfig":"16"},{"size":3076,"mtime":1637408327589,"results":"24","hashOfConfig":"16"},{"size":5723,"mtime":1637408069322,"results":"25","hashOfConfig":"16"},{"size":679,"mtime":1637408069327,"results":"26","hashOfConfig":"16"},{"size":721,"mtime":1637408069326,"results":"27","hashOfConfig":"16"},{"size":620,"mtime":1637408069328,"results":"28","hashOfConfig":"16"},{"size":511,"mtime":1637411024109,"results":"29","hashOfConfig":"16"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},"1ogu6sj",{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"35","messages":"36","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37","usedDeprecatedRules":"32"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42","usedDeprecatedRules":"32"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"32"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52","usedDeprecatedRules":"32"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\Abhijeet\\Desktop\\New folder\\The-Quizzler\\ClientSide\\src\\index.js",[],["63","64"],"C:\\Users\\Abhijeet\\Desktop\\New folder\\The-Quizzler\\ClientSide\\src\\App.jsx",[],"C:\\Users\\Abhijeet\\Desktop\\New folder\\The-Quizzler\\ClientSide\\src\\components\\CreateQuizPage.jsx",["65","66","67","68"],"import AddQuestion from \"./AddQuestion\";\r\nimport { useState, useEffect } from \"react\";\r\nimport useBasicInput from \"../hooks/usebasic-input\";\r\nimport React from \"react\";\r\nimport Axios from \"axios\";\r\nimport { useParams, useNavigate } from \"react-router-dom\";\r\n//import QuestionCard from \"./QuestionCard\";\r\n\r\nvar year = new Date();\r\nyear = year.getFullYear();\r\n\r\nconst CreateQuizPage = () => {\r\n  const navigate = useNavigate();\r\n  const params = useParams();\r\n  const [userData, setUserData] = useState({});\r\n\r\n  useEffect(() => {\r\n    Axios.get(\"http://localhost:3001/getUser/\" + params.id).then((response) => {\r\n      setUserData(response.data);\r\n    });\r\n  }, []);\r\n  const [allQutions, addques] = useState([]);\r\n  var x = 0;\r\n  var t = \"public\";\r\n  let quizCreatedId = \"\";\r\n  const Quiztype = (e) => {\r\n    t = e.target.value;\r\n  };\r\n  const data = (Q) => {\r\n    const item = Q;\r\n    addques([...allQutions, item]);\r\n    x++;\r\n    console.log(x);\r\n    //console.log(allQutions);\r\n  };\r\n  const {\r\n    value: title,\r\n    valueChangeHandler: titleChangeHandler,\r\n    valueIsValid: titleIsValid,\r\n    onBlurHandler: titleBlurHandler,\r\n    inputTouched: titleInputTouched,\r\n    reset: titleReset,\r\n  } = useBasicInput((value) => value.trim().length !== 0);\r\n\r\n  const {\r\n    value: Description,\r\n    valueChangeHandler: DescriptionChangeHandler,\r\n    valueIsValid: DescriptionIsValid,\r\n    onBlurHandler: DescriptionBlurHandler,\r\n    inputTouched: DescriptionInputTouched,\r\n    reset: DescriptionReset,\r\n  } = useBasicInput((value) => value.trim().length !== 0);\r\n\r\n  const submissionHandler = async (e) => {\r\n    e.preventDefault();\r\n    if (!formIsValid) {\r\n      return;\r\n    }\r\n    await Axios.post(\"http://localhost:3001/postQuiz\", {\r\n      title: title,\r\n      description: Description,\r\n      t: t,\r\n      allQuestions: allQutions,\r\n      userId: userData._id,\r\n    });\r\n\r\n    await Axios.get(\"http://localhost:3001/getAllQuizzes\").then((response) => {\r\n      response.data.map((val) => {\r\n        if (val.userId === userData._id && val.title === title) {\r\n          quizCreatedId = val._id;\r\n        }\r\n      });\r\n    });\r\n\r\n    await Axios.post(\r\n      \"http://localhost:3001/updateUserQuizzesCreated/\" + userData._id,\r\n      {\r\n        quizId: quizCreatedId,\r\n      }\r\n    );\r\n\r\n    await Axios.get(\"http://localhost:3001/getAllQuizzes\").then((response) => {\r\n      response.data.map((data) => {\r\n        if (data.description === Description && data.title === title) {\r\n          navigate(\"/quizCreated/\" + data._id);\r\n          return;\r\n        }\r\n      });\r\n    });\r\n\r\n    DescriptionReset();\r\n    titleReset();\r\n    //console.log(des.quizDescription, des.quizTitle);\r\n  };\r\n\r\n  const DescriptionInputClasses =\r\n    !DescriptionIsValid && DescriptionInputTouched ? \"invalid\" : \"\";\r\n  const titleInputClasses = !titleIsValid && titleInputTouched ? \"invalid\" : \"\";\r\n  const formIsValid =\r\n    DescriptionIsValid && titleIsValid && allQutions.length >= 1;\r\n\r\n  return (\r\n    <div>\r\n      <header>\r\n        <h1 onMouseDown={() => navigate(\"/homepage/\")}>Quizzler</h1>\r\n        <ul className=\"navbarItems\">\r\n          <li\r\n            onClick={() => {\r\n              return (\r\n                <div>\r\n                  {\r\n                    navigate(\"/homepage/\" + params.id)\r\n                    //console.log(props.q.allQuestions)\r\n                  }\r\n                </div>\r\n              );\r\n            }}\r\n          >\r\n            Give Quiz\r\n          </li>\r\n          <li>About us</li>\r\n          <li>{userData.name}</li>\r\n        </ul>\r\n      </header>\r\n      <div className=\"CreateQuizPage\">\r\n        <form onSubmit={submissionHandler}>\r\n          <div className=\"QuizInfoContainer\">\r\n            <div className={`form-control ${titleInputClasses}`}>\r\n              <label className=\"quizTitle\">Quiz Title</label>\r\n              <br />\r\n              <input\r\n                type=\"textarea\"\r\n                value={title}\r\n                onBlur={titleBlurHandler}\r\n                onChange={titleChangeHandler}\r\n                className=\"quizTitleInput\"\r\n              />\r\n              <br />\r\n            </div>\r\n            <div className={`form-control ${DescriptionInputClasses}`}>\r\n              <label className=\"quizDescription\">Quiz Description</label>\r\n              <br />\r\n              <textarea\r\n                value={Description}\r\n                onBlur={DescriptionBlurHandler}\r\n                onChange={DescriptionChangeHandler}\r\n                className=\"quizDescriptionInput\"\r\n                rows=\"30\"\r\n                cols=\"70\"\r\n              />\r\n              <br />\r\n            </div>\r\n            <div className={`form-control`} onClick={Quiztype}>\r\n              <div className=\"Quiztype\">\r\n                <div className=\"PrivateRadio\">\r\n                  <label>Private</label>\r\n                  <input\r\n                    className=\"RadioInput\"\r\n                    type=\"radio\"\r\n                    name=\"quiz-type\"\r\n                    value=\"private\"\r\n                  />\r\n                </div>\r\n                <div className=\"PublicRadio\">\r\n                  <label>Public</label>\r\n                  <input\r\n                    className=\"RadioInput\"\r\n                    type=\"radio\"\r\n                    name=\"quiz-type\"\r\n                    value=\"public\"\r\n                    checked\r\n                  />\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div className={`form-control`}>\r\n            {allQutions.length >= 1 && (\r\n              <div className=\"QuizInfoContainer\">\r\n                {allQutions.map((q, key) => (\r\n                  <div>\r\n                    Question {key + 1}) {q.Question}\r\n                  </div>\r\n                ))}\r\n              </div>\r\n            )}\r\n            <section>\r\n              {\r\n                <div className=\"QuestionCard\">\r\n                  <strong>Question</strong>\r\n                  <br></br>\r\n                  <br></br>\r\n\r\n                  <AddQuestion data={data} />\r\n                </div>\r\n              }\r\n            </section>\r\n          </div>\r\n          <div>\r\n            <button className=\"form-actions\" type=\"submit\" value=\"Create Quiz\">\r\n              {\" \"}\r\n              Create Quiz !\r\n            </button>\r\n          </div>\r\n        </form>\r\n      </div>\r\n      <footer>\r\n        <p> Copyright© {year} </p>{\" \"}\r\n      </footer>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CreateQuizPage;\r\n","C:\\Users\\Abhijeet\\Desktop\\New folder\\The-Quizzler\\ClientSide\\src\\components\\LoginPage.jsx",[],"C:\\Users\\Abhijeet\\Desktop\\New folder\\The-Quizzler\\ClientSide\\src\\components\\QuizCreated.jsx",["69"],"import { useEffect } from \"react\";\r\nimport Axios from \"axios\";\r\nimport { useParams } from \"react-router-dom\";\r\n\r\nconst QuizCreated = () => {\r\n  const params = useParams();\r\n\r\n  useEffect(() => {\r\n    Axios.get(\"http://localhost:3001/getQuiz/\" + params.id).then((response) => {\r\n      console.log(response);\r\n    });\r\n  }, []);\r\n\r\n  return (\r\n    <div>\r\n      This page shows the quiz user just created!(Look at the browser console)\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default QuizCreated;\r\n","C:\\Users\\Abhijeet\\Desktop\\New folder\\The-Quizzler\\ClientSide\\src\\components\\HomePage.jsx",["70","71","72","73"],"import React from \"react\";\r\nimport { useEffect, useState, Fragment } from \"react\";\r\nimport Axios from \"axios\";\r\nimport { useParams, Link, useNavigate } from \"react-router-dom\";\r\nimport SelectQuiz from \"./SelectQuiz\";\r\n\r\nvar year = new Date();\r\nyear = year.getFullYear();\r\n\r\nfunction HomePage(props) {\r\n  const isLoggedIn = props.loggedIn;\r\n\r\n  // const id = props.id;\r\n  const [name, setName] = useState(\"\");\r\n  const [id, setId] = useState(\"\");\r\n  const [allQuizzes, setAllQuizzes] = useState({});\r\n  const navigate = useNavigate();\r\n  const params = useParams();\r\n\r\n  useEffect(() => {\r\n    Axios.get(\"http://localhost:3001/getUser/\" + params.id).then(\r\n      (response) => {\r\n        setName(response.data.name);\r\n        setId(response.data.id);\r\n      }\r\n      //WE ARE GETTING ALL OF OUR USER DATA IN response.data\r\n    );\r\n\r\n    Axios.get(\"http://localhost:3001/getAllQuizzes\").then((response) => {\r\n      setAllQuizzes(response.data);\r\n\r\n      //WE ARE GETTING ALL OF OUR QUIZZES IN response\r\n    });\r\n  }, []);\r\n  const q = Object.values(allQuizzes);\r\n  if (true) {\r\n    return (\r\n      <div>\r\n        <header>\r\n          <h1 onMouseDown={() => navigate(\"/homepage/\" + params.id)}>\r\n            Quizzler\r\n          </h1>\r\n          <ul className=\"navbarItems\">\r\n            <li onClick={() => navigate(\"/createquiz/\" + params.id)}>\r\n              Create a Quiz\r\n            </li>\r\n            <li>About us</li>\r\n          </ul>\r\n          <nav\r\n            className=\"UserName\"\r\n            onMouseDown={() => {\r\n              navigate(\"/profile/\" + params.id);\r\n            }}\r\n          >\r\n            {isLoggedIn && <div>{name}</div>}\r\n          </nav>\r\n          <nav>\r\n            {!isLoggedIn && (\r\n              <div className=\"Signup\">\r\n                <button\r\n                  onClick={() => {\r\n                    return <div> {navigate(\"/register\")}</div>;\r\n                  }}\r\n                >\r\n                  Sign Up\r\n                </button>\r\n              </div>\r\n            )}\r\n          </nav>\r\n        </header>\r\n        <div>{console.log(q)}</div>\r\n        <div>\r\n          {q.map((q, key) => {\r\n            return (\r\n              <div>\r\n                <SelectQuiz\r\n                  key={key}\r\n                  q={q}\r\n                  isLoggedIn={isLoggedIn}\r\n                  id={params.id}\r\n                />\r\n              </div>\r\n            );\r\n          })}\r\n        </div>\r\n        <footer>\r\n          <p> Copyright© {year} </p>{\" \"}\r\n        </footer>\r\n      </div>\r\n    );\r\n  }\r\n  // navigate(\"/login\"); NAVIGATE IS NOT WORKING!??\r\n}\r\n\r\nexport default HomePage;\r\n","C:\\Users\\Abhijeet\\Desktop\\New folder\\The-Quizzler\\ClientSide\\src\\components\\Profile.jsx",["74","75"],"C:\\Users\\Abhijeet\\Desktop\\New folder\\The-Quizzler\\ClientSide\\src\\components\\RegisterPage.jsx",[],"C:\\Users\\Abhijeet\\Desktop\\New folder\\The-Quizzler\\ClientSide\\src\\components\\AttemptQuiz.jsx",["76","77","78","79","80","81","82"],"import React from \"react\";\r\nimport { useEffect, useState, Fragment } from \"react\";\r\nimport Axios from \"axios\";\r\nimport { useNavigate, useParams, Link } from \"react-router-dom\";\r\nimport QuestionBox from \"./QuestionBox\";\r\n\r\nfunction AttemptQuiz(props) {\r\n  const [state, setState] = useState(\"live\");\r\n  const isLoggedIn = props.loggedIn;\r\n  const navigate = useNavigate();\r\n  const [score, setScore] = useState(0);\r\n  const [response, setResponse] = useState(0);\r\n  const [name, setName] = useState(\"\");\r\n  const [allQues, setQues] = useState([]);\r\n  const [a, setA] = useState([]);\r\n  const params = useParams();\r\n  var s = 0;\r\n\r\n  const submitHandler = async () => {\r\n    if (response === a.length) {\r\n      setState(\"done\");\r\n\r\n      await Axios.post(\r\n        \"http://localhost:3001/updateUserQuizzesCompleted/\" + params.id,\r\n        {\r\n          quizId: params.id2,\r\n          marksScored: score,\r\n        }\r\n      );\r\n    }\r\n  };\r\n\r\n  const computedAnswer = (answer, correct) => {\r\n    console.log(answer, correct);\r\n    if (answer === correct) {\r\n      s++;\r\n      setScore(score + 1);\r\n    }\r\n    setResponse(response + 1);\r\n  };\r\n  useEffect(() => {\r\n    Axios.get(\"http://localhost:3001/getUser/\" + params.id).then((response) => {\r\n      setName(response.data.name);\r\n      //WE ARE GETTING ALL OF OUR USER DATA IN response.data\r\n    });\r\n\r\n    Axios.get(\"http://localhost:3001/getAllQuizzes\").then((response) => {\r\n      for (let i = 0; i < response.data.length; i++) {\r\n        if (response.data[i]._id === params.id2) {\r\n          setQues(response.data[i]);\r\n          setA(response.data[i].allQuestions);\r\n          break;\r\n        }\r\n      }\r\n      //setQues(response.data);\r\n\r\n      //WE ARE GETTING ALL OF OUR QUIZZES IN response\r\n    });\r\n  }, []);\r\n  const q = Object.values(allQues);\r\n  if (true) {\r\n    return (\r\n      <div>\r\n        <header>\r\n          <h1 onMouseDown={() => navigate(\"/homepage/\")}>Quizzler</h1>\r\n        </header>\r\n\r\n        <div className=\"Container\">\r\n          <h1>{allQues.title}</h1>\r\n          <h4>\r\n            <div>\r\n              {state === \"live\" && (\r\n                <div>\r\n                  {a.map((q) => (\r\n                    <div>\r\n                      <QuestionBox\r\n                        question={q.Question}\r\n                        option1={q.option1}\r\n                        option2={q.option2}\r\n                        option3={q.option3}\r\n                        option4={q.option4}\r\n                        selected={(answer) => computedAnswer(answer, q.Answer)}\r\n                      />\r\n                    </div>\r\n                  ))}\r\n                  <button onClick={submitHandler}> Submit</button>\r\n                </div>\r\n              )}\r\n              {response === a.length && state === \"done\" ? (\r\n                <h2>\r\n                  Your score is - {score} / {a.length}\r\n                </h2>\r\n              ) : null}\r\n            </div>\r\n          </h4>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n  // navigate(\"/login\");   NAVIGATE IS NOT WORKING!??\r\n}\r\n\r\nexport default AttemptQuiz;\r\n","C:\\Users\\Abhijeet\\Desktop\\New folder\\The-Quizzler\\ClientSide\\src\\components\\AddQuestion.jsx",[],"C:\\Users\\Abhijeet\\Desktop\\New folder\\The-Quizzler\\ClientSide\\src\\components\\SelectQuiz.jsx",[],"C:\\Users\\Abhijeet\\Desktop\\New folder\\The-Quizzler\\ClientSide\\src\\components\\QuestionBox.jsx",[],"C:\\Users\\Abhijeet\\Desktop\\New folder\\The-Quizzler\\ClientSide\\src\\hooks\\usebasic-input.jsx",[],"C:\\Users\\Abhijeet\\Desktop\\New folder\\The-Quizzler\\ClientSide\\src\\components\\PastResultsPage.jsx",["83"],{"ruleId":"84","replacedBy":"85"},{"ruleId":"86","replacedBy":"87"},{"ruleId":"88","severity":1,"message":"89","line":21,"column":6,"nodeType":"90","endLine":21,"endColumn":8,"suggestions":"91"},{"ruleId":"92","severity":1,"message":"93","line":68,"column":31,"nodeType":"94","messageId":"95","endLine":68,"endColumn":33},{"ruleId":"92","severity":1,"message":"96","line":83,"column":32,"nodeType":"94","messageId":"97","endLine":83,"endColumn":34},{"ruleId":"92","severity":1,"message":"93","line":86,"column":11,"nodeType":"98","messageId":"99","endLine":86,"endColumn":18},{"ruleId":"88","severity":1,"message":"89","line":12,"column":6,"nodeType":"90","endLine":12,"endColumn":8,"suggestions":"100"},{"ruleId":"101","severity":1,"message":"102","line":2,"column":31,"nodeType":"103","messageId":"104","endLine":2,"endColumn":39},{"ruleId":"101","severity":1,"message":"105","line":4,"column":21,"nodeType":"103","messageId":"104","endLine":4,"endColumn":25},{"ruleId":"101","severity":1,"message":"106","line":15,"column":10,"nodeType":"103","messageId":"104","endLine":15,"endColumn":12},{"ruleId":"88","severity":1,"message":"89","line":34,"column":6,"nodeType":"90","endLine":34,"endColumn":8,"suggestions":"107"},{"ruleId":"88","severity":1,"message":"108","line":14,"column":13,"nodeType":"94","endLine":21,"endColumn":4},{"ruleId":"88","severity":1,"message":"89","line":21,"column":6,"nodeType":"90","endLine":21,"endColumn":8,"suggestions":"109"},{"ruleId":"101","severity":1,"message":"102","line":2,"column":31,"nodeType":"103","messageId":"104","endLine":2,"endColumn":39},{"ruleId":"101","severity":1,"message":"105","line":4,"column":34,"nodeType":"103","messageId":"104","endLine":4,"endColumn":38},{"ruleId":"101","severity":1,"message":"110","line":9,"column":9,"nodeType":"103","messageId":"104","endLine":9,"endColumn":19},{"ruleId":"101","severity":1,"message":"111","line":13,"column":10,"nodeType":"103","messageId":"104","endLine":13,"endColumn":14},{"ruleId":"101","severity":1,"message":"112","line":17,"column":7,"nodeType":"103","messageId":"104","endLine":17,"endColumn":8},{"ruleId":"88","severity":1,"message":"113","line":59,"column":6,"nodeType":"90","endLine":59,"endColumn":8,"suggestions":"114"},{"ruleId":"101","severity":1,"message":"115","line":60,"column":9,"nodeType":"103","messageId":"104","endLine":60,"endColumn":10},{"ruleId":"88","severity":1,"message":"89","line":12,"column":6,"nodeType":"90","endLine":12,"endColumn":8,"suggestions":"116"},"no-native-reassign",["117"],"no-negated-in-lhs",["118"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'params.id'. Either include it or remove the dependency array.","ArrayExpression",["119"],"array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","Array.prototype.map() expects a value to be returned at the end of arrow function.","expectedAtEnd","ReturnStatement","expectedReturnValue",["120"],"no-unused-vars","'Fragment' is defined but never used.","Identifier","unusedVar","'Link' is defined but never used.","'id' is assigned a value but never used.",["121"],"Effect callbacks are synchronous to prevent race conditions. Put the async function inside:\n\nuseEffect(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching",["122"],"'isLoggedIn' is assigned a value but never used.","'name' is assigned a value but never used.","'s' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'params.id' and 'params.id2'. Either include them or remove the dependency array.",["123"],"'q' is assigned a value but never used.",["124"],"no-global-assign","no-unsafe-negation",{"desc":"125","fix":"126"},{"desc":"125","fix":"127"},{"desc":"125","fix":"128"},{"desc":"125","fix":"129"},{"desc":"130","fix":"131"},{"desc":"125","fix":"132"},"Update the dependencies array to be: [params.id]",{"range":"133","text":"134"},{"range":"135","text":"134"},{"range":"136","text":"134"},{"range":"137","text":"134"},"Update the dependencies array to be: [params.id, params.id2]",{"range":"138","text":"139"},{"range":"140","text":"134"},[661,663],"[params.id]",[322,324],[1015,1017],[620,622],[1761,1763],"[params.id, params.id2]",[331,333]]