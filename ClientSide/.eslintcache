[{"/home/shivam/new/The-Quizzler/ClientSide/src/index.js":"1","/home/shivam/new/The-Quizzler/ClientSide/src/App.jsx":"2","/home/shivam/new/The-Quizzler/ClientSide/src/components/LoginPage.jsx":"3","/home/shivam/new/The-Quizzler/ClientSide/src/components/RegisterPage.jsx":"4","/home/shivam/new/The-Quizzler/ClientSide/src/components/CreateQuizPage.jsx":"5","/home/shivam/new/The-Quizzler/ClientSide/src/components/HomePage.jsx":"6","/home/shivam/new/The-Quizzler/ClientSide/src/components/AttemptQuiz.jsx":"7","/home/shivam/new/The-Quizzler/ClientSide/src/components/PastResultsPage.jsx":"8","/home/shivam/new/The-Quizzler/ClientSide/src/components/QuizCreated.jsx":"9","/home/shivam/new/The-Quizzler/ClientSide/src/components/Profile.jsx":"10","/home/shivam/new/The-Quizzler/ClientSide/src/hooks/usebasic-input.jsx":"11","/home/shivam/new/The-Quizzler/ClientSide/src/components/SelectQuiz.jsx":"12","/home/shivam/new/The-Quizzler/ClientSide/src/components/AddQuestion.jsx":"13","/home/shivam/new/The-Quizzler/ClientSide/src/components/QuestionBox.jsx":"14"},{"size":237,"mtime":1637235062435,"results":"15","hashOfConfig":"16"},{"size":1825,"mtime":1637501625481,"results":"17","hashOfConfig":"16"},{"size":3399,"mtime":1637383064752,"results":"18","hashOfConfig":"16"},{"size":3799,"mtime":1637383064784,"results":"19","hashOfConfig":"16"},{"size":6278,"mtime":1637501625481,"results":"20","hashOfConfig":"16"},{"size":2627,"mtime":1637506734124,"results":"21","hashOfConfig":"16"},{"size":3139,"mtime":1637501625481,"results":"22","hashOfConfig":"16"},{"size":1529,"mtime":1637507563201,"results":"23","hashOfConfig":"16"},{"size":465,"mtime":1637235062435,"results":"24","hashOfConfig":"16"},{"size":2711,"mtime":1637508160209,"results":"25","hashOfConfig":"16"},{"size":588,"mtime":1637235062435,"results":"26","hashOfConfig":"16"},{"size":669,"mtime":1637501625481,"results":"27","hashOfConfig":"16"},{"size":5539,"mtime":1637405051968,"results":"28","hashOfConfig":"16"},{"size":717,"mtime":1637501625481,"results":"29","hashOfConfig":"16"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},"1j6xx29",{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"32"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"44","messages":"45","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46","usedDeprecatedRules":"32"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"49","messages":"50","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51","usedDeprecatedRules":"32"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},"/home/shivam/new/The-Quizzler/ClientSide/src/index.js",[],["62","63"],"/home/shivam/new/The-Quizzler/ClientSide/src/App.jsx",[],"/home/shivam/new/The-Quizzler/ClientSide/src/components/LoginPage.jsx",[],"/home/shivam/new/The-Quizzler/ClientSide/src/components/RegisterPage.jsx",[],"/home/shivam/new/The-Quizzler/ClientSide/src/components/CreateQuizPage.jsx",["64","65","66","67"],"import AddQuestion from \"./AddQuestion\";\nimport { useState, useEffect } from \"react\";\nimport useBasicInput from \"../hooks/usebasic-input\";\nimport React from \"react\";\nimport Axios from \"axios\";\nimport { useParams, useNavigate } from \"react-router-dom\";\n//import QuestionCard from \"./QuestionCard\";\n\nvar year = new Date();\nyear = year.getFullYear();\n\nconst CreateQuizPage = () => {\n  const navigate = useNavigate();\n  const params = useParams();\n  const [userData, setUserData] = useState({});\n\n  useEffect(() => {\n    Axios.get(\"http://localhost:3001/getUser/\" + params.id).then((response) => {\n      setUserData(response.data);\n    });\n  }, []);\n  const [allQutions, addques] = useState([]);\n  var x = 0;\n  var t = \"public\";\n  let quizCreatedId = \"\";\n  const Quiztype = (e) => {\n    t = e.target.value;\n  };\n  const data = (Q) => {\n    const item = Q;\n    addques([...allQutions, item]);\n    x++;\n    console.log(x);\n    //console.log(allQutions);\n  };\n  const {\n    value: title,\n    valueChangeHandler: titleChangeHandler,\n    valueIsValid: titleIsValid,\n    onBlurHandler: titleBlurHandler,\n    inputTouched: titleInputTouched,\n    reset: titleReset,\n  } = useBasicInput((value) => value.trim().length !== 0);\n\n  const {\n    value: Description,\n    valueChangeHandler: DescriptionChangeHandler,\n    valueIsValid: DescriptionIsValid,\n    onBlurHandler: DescriptionBlurHandler,\n    inputTouched: DescriptionInputTouched,\n    reset: DescriptionReset,\n  } = useBasicInput((value) => value.trim().length !== 0);\n\n  const submissionHandler = async (e) => {\n    e.preventDefault();\n    if (!formIsValid) {\n      return;\n    }\n    await Axios.post(\"http://localhost:3001/postQuiz\", {\n      title: title,\n      description: Description,\n      t: t,\n      allQuestions: allQutions,\n      userId: userData._id,\n    });\n\n    await Axios.get(\"http://localhost:3001/getAllQuizzes\").then((response) => {\n      response.data.map((val) => {\n        if (val.userId === userData._id && val.title === title) {\n          quizCreatedId = val._id;\n        }\n      });\n    });\n\n    await Axios.post(\n      \"http://localhost:3001/updateUserQuizzesCreated/\" + userData._id,\n      {\n        quizId: quizCreatedId,\n      }\n    );\n\n    await Axios.get(\"http://localhost:3001/getAllQuizzes\").then((response) => {\n      response.data.map((data) => {\n        if (data.description === Description && data.title === title) {\n          navigate(\"/quizCreated/\" + data._id);\n          return;\n        }\n      });\n    });\n\n    DescriptionReset();\n    titleReset();\n    //console.log(des.quizDescription, des.quizTitle);\n  };\n\n  const DescriptionInputClasses =\n    !DescriptionIsValid && DescriptionInputTouched ? \"invalid\" : \"\";\n  const titleInputClasses = !titleIsValid && titleInputTouched ? \"invalid\" : \"\";\n  const formIsValid =\n    DescriptionIsValid && titleIsValid && allQutions.length >= 1;\n\n  return (\n    <div>\n      <header>\n        <h1 onMouseDown={() => navigate(\"/homepage/\" + params.id)}>Quizzler</h1>\n        <ul className=\"navbarItems\">\n          <li\n            onClick={() => {\n              return (\n                <div>\n                  {\n                    navigate(\"/homepage/\" + params.id)\n                    //console.log(props.q.allQuestions)\n                  }\n                </div>\n              );\n            }}\n          >\n            Attempt a Quiz\n          </li>\n          <li>About us</li>\n          <li>{userData.name}</li>\n        </ul>\n      </header>\n      <div className=\"CreateQuizPage\">\n        <form onSubmit={submissionHandler}>\n          <div className=\"QuizInfoContainer\">\n            <div className={`form-control ${titleInputClasses}`}>\n              <label className=\"quizTitle\">Quiz Title</label>\n              <br />\n              <input\n                type=\"textarea\"\n                value={title}\n                onBlur={titleBlurHandler}\n                onChange={titleChangeHandler}\n                className=\"quizTitleInput\"\n              />\n              <br />\n            </div>\n            <div className={`form-control ${DescriptionInputClasses}`}>\n              <label className=\"quizDescription\">Quiz Description</label>\n              <br />\n              <textarea\n                value={Description}\n                onBlur={DescriptionBlurHandler}\n                onChange={DescriptionChangeHandler}\n                className=\"quizDescriptionInput\"\n                rows=\"30\"\n                cols=\"70\"\n              />\n              <br />\n            </div>\n            <div className={`form-control`} onClick={Quiztype}>\n              <div className=\"Quiztype\">\n                <div className=\"PrivateRadio\">\n                  <label>Private</label>\n                  <input\n                    className=\"RadioInput\"\n                    type=\"radio\"\n                    name=\"quiz-type\"\n                    value=\"private\"\n                  />\n                </div>\n                <div className=\"PublicRadio\">\n                  <label>Public</label>\n                  <input\n                    className=\"RadioInput\"\n                    type=\"radio\"\n                    name=\"quiz-type\"\n                    value=\"public\"\n                    checked\n                  />\n                </div>\n              </div>\n            </div>\n          </div>\n          <div className={`form-control`}>\n            {allQutions.length >= 1 && (\n              <div className=\"QuizInfoContainer\">\n                {allQutions.map((q, key) => (\n                  <div>\n                    Question {key + 1}) {q.Question}\n                  </div>\n                ))}\n              </div>\n            )}\n            <section>\n              {\n                <div className=\"QuestionCard\">\n                  <strong>Question</strong>\n                  <br></br>\n                  <br></br>\n\n                  <AddQuestion data={data} />\n                </div>\n              }\n            </section>\n          </div>\n          <div>\n            <button className=\"form-actions\" type=\"submit\" value=\"Create Quiz\">\n              {\" \"}\n              Create Quiz !\n            </button>\n          </div>\n        </form>\n      </div>\n      <footer>\n        <p> Copyright© {year} </p>{\" \"}\n      </footer>\n    </div>\n  );\n};\n\nexport default CreateQuizPage;\n","/home/shivam/new/The-Quizzler/ClientSide/src/components/HomePage.jsx",["68","69","70","71"],"/home/shivam/new/The-Quizzler/ClientSide/src/components/AttemptQuiz.jsx",["72","73","74","75","76","77"],"import React from \"react\";\nimport { useEffect, useState, Fragment } from \"react\";\nimport Axios from \"axios\";\nimport { useNavigate, useParams, Link } from \"react-router-dom\";\nimport QuestionBox from \"./QuestionBox\";\n\nvar year = new Date();\nyear = year.getFullYear();\n\nfunction AttemptQuiz(props) {\n  const [state, setState] = useState(\"live\");\n  const isLoggedIn = props.loggedIn;\n  const navigate = useNavigate();\n  const [score, setScore] = useState(0);\n  const [response, setResponse] = useState(0);\n  const [allQues, setQues] = useState([]);\n  const [a, setA] = useState([]);\n  const params = useParams();\n  var s = 0;\n\n  const submitHandler = async () => {\n    if (response === a.length) {\n      setState(\"done\");\n\n      await Axios.post(\n        \"http://localhost:3001/updateUserQuizzesCompleted/\" + params.id,\n        {\n          quizId: params.id2,\n          marksScored: score,\n        }\n      );\n    }\n  };\n\n  const computedAnswer = (answer, correct) => {\n    console.log(answer, correct);\n    if (answer === correct) {\n      s++;\n      setScore(score + 1);\n    }\n    setResponse(response + 1);\n  };\n  useEffect(() => {\n    Axios.get(\"http://localhost:3001/getAllQuizzes\").then((response) => {\n      for (let i = 0; i < response.data.length; i++) {\n        if (response.data[i]._id === params.id2) {\n          setQues(response.data[i]);\n          setA(response.data[i].allQuestions);\n          break;\n        }\n      }\n\n      //WE ARE GETTING ALL OF OUR QUIZZES IN response\n    });\n  }, []);\n  const q = Object.values(allQues);\n  if (true) {\n    return (\n      <div>\n        <header>\n          <h1 onMouseDown={() => navigate(\"/homepage/\")}>Quizzler</h1>\n        </header>\n\n        <div className=\"AttemptPage\">\n          <div className=\"AttemptQuizTitle\">\n            <h1>{allQues.title}</h1>\n          </div>\n          <h4>\n            <div>\n              {state === \"live\" && (\n                <div>\n                  {a.map((q) => (\n                    <div className=\"QuestionContainer\">\n                      <QuestionBox\n                        question={q.Question}\n                        option1={q.option1}\n                        option2={q.option2}\n                        option3={q.option3}\n                        option4={q.option4}\n                        selected={(answer) => computedAnswer(answer, q.Answer)}\n                      />\n                    </div>\n                  ))}\n                  <div className=\"AttemptSubmit\">\n                    <button className=\"SubmitButton\" onClick={submitHandler}>\n                      {\" \"}\n                      Submit\n                    </button>\n                  </div>\n                </div>\n              )}\n              {response === a.length && state === \"done\" ? (\n                <h2>\n                  Your score is - {score} / {a.length}\n                </h2>\n              ) : null}\n            </div>\n          </h4>\n        </div>\n        <footer className=\"AttemptFooter\">\n          <p> Copyright© {year} </p>{\" \"}\n        </footer>\n      </div>\n    );\n  }\n  // navigate(\"/login\");   NAVIGATE IS NOT WORKING!??\n}\n\nexport default AttemptQuiz;\n","/home/shivam/new/The-Quizzler/ClientSide/src/components/PastResultsPage.jsx",["78"],"/home/shivam/new/The-Quizzler/ClientSide/src/components/QuizCreated.jsx",["79"],"import { useEffect } from \"react\";\nimport Axios from \"axios\";\nimport { useParams } from \"react-router-dom\";\n\nconst QuizCreated = () => {\n  const params = useParams();\n\n  useEffect(() => {\n    Axios.get(\"http://localhost:3001/getQuiz/\" + params.id).then((response) => {\n      console.log(response);\n    });\n  }, []);\n\n  return (\n    <div>\n      This page shows the quiz user just created!(Look at the browser console)\n    </div>\n  );\n};\n\nexport default QuizCreated;\n","/home/shivam/new/The-Quizzler/ClientSide/src/components/Profile.jsx",["80"],"/home/shivam/new/The-Quizzler/ClientSide/src/hooks/usebasic-input.jsx",[],"/home/shivam/new/The-Quizzler/ClientSide/src/components/SelectQuiz.jsx",[],"/home/shivam/new/The-Quizzler/ClientSide/src/components/AddQuestion.jsx",[],"/home/shivam/new/The-Quizzler/ClientSide/src/components/QuestionBox.jsx",[],{"ruleId":"81","replacedBy":"82"},{"ruleId":"83","replacedBy":"84"},{"ruleId":"85","severity":1,"message":"86","line":21,"column":6,"nodeType":"87","endLine":21,"endColumn":8,"suggestions":"88"},{"ruleId":"89","severity":1,"message":"90","line":68,"column":31,"nodeType":"91","messageId":"92","endLine":68,"endColumn":33},{"ruleId":"89","severity":1,"message":"93","line":83,"column":32,"nodeType":"91","messageId":"94","endLine":83,"endColumn":34},{"ruleId":"89","severity":1,"message":"90","line":86,"column":11,"nodeType":"95","messageId":"96","endLine":86,"endColumn":18},{"ruleId":"97","severity":1,"message":"98","line":2,"column":31,"nodeType":"99","messageId":"100","endLine":2,"endColumn":39},{"ruleId":"97","severity":1,"message":"101","line":4,"column":21,"nodeType":"99","messageId":"100","endLine":4,"endColumn":25},{"ruleId":"97","severity":1,"message":"102","line":15,"column":10,"nodeType":"99","messageId":"100","endLine":15,"endColumn":12},{"ruleId":"85","severity":1,"message":"86","line":34,"column":6,"nodeType":"87","endLine":34,"endColumn":8,"suggestions":"103"},{"ruleId":"97","severity":1,"message":"98","line":2,"column":31,"nodeType":"99","messageId":"100","endLine":2,"endColumn":39},{"ruleId":"97","severity":1,"message":"101","line":4,"column":34,"nodeType":"99","messageId":"100","endLine":4,"endColumn":38},{"ruleId":"97","severity":1,"message":"104","line":12,"column":9,"nodeType":"99","messageId":"100","endLine":12,"endColumn":19},{"ruleId":"97","severity":1,"message":"105","line":19,"column":7,"nodeType":"99","messageId":"100","endLine":19,"endColumn":8},{"ruleId":"85","severity":1,"message":"106","line":55,"column":6,"nodeType":"87","endLine":55,"endColumn":8,"suggestions":"107"},{"ruleId":"97","severity":1,"message":"108","line":56,"column":9,"nodeType":"99","messageId":"100","endLine":56,"endColumn":10},{"ruleId":"85","severity":1,"message":"86","line":27,"column":6,"nodeType":"87","endLine":27,"endColumn":8,"suggestions":"109"},{"ruleId":"85","severity":1,"message":"86","line":12,"column":6,"nodeType":"87","endLine":12,"endColumn":8,"suggestions":"110"},{"ruleId":"85","severity":1,"message":"86","line":24,"column":6,"nodeType":"87","endLine":24,"endColumn":8,"suggestions":"111"},"no-native-reassign",["112"],"no-negated-in-lhs",["113"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'params.id'. Either include it or remove the dependency array.","ArrayExpression",["114"],"array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","Array.prototype.map() expects a value to be returned at the end of arrow function.","expectedAtEnd","ReturnStatement","expectedReturnValue","no-unused-vars","'Fragment' is defined but never used.","Identifier","unusedVar","'Link' is defined but never used.","'id' is assigned a value but never used.",["115"],"'isLoggedIn' is assigned a value but never used.","'s' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'params.id2'. Either include it or remove the dependency array.",["116"],"'q' is assigned a value but never used.",["117"],["118"],["119"],"no-global-assign","no-unsafe-negation",{"desc":"120","fix":"121"},{"desc":"120","fix":"122"},{"desc":"123","fix":"124"},{"desc":"120","fix":"125"},{"desc":"120","fix":"126"},{"desc":"120","fix":"127"},"Update the dependencies array to be: [params.id]",{"range":"128","text":"129"},{"range":"130","text":"129"},"Update the dependencies array to be: [params.id2]",{"range":"131","text":"132"},{"range":"133","text":"129"},{"range":"134","text":"129"},{"range":"135","text":"129"},[641,643],"[params.id]",[982,984],[1496,1498],"[params.id2]",[860,862],[311,313],[698,700]]