[{"/home/shivam/new/The-Quizzler/ClientSide/src/index.js":"1","/home/shivam/new/The-Quizzler/ClientSide/src/App.jsx":"2","/home/shivam/new/The-Quizzler/ClientSide/src/components/RegisterPage.jsx":"3","/home/shivam/new/The-Quizzler/ClientSide/src/components/QuizCreated.jsx":"4","/home/shivam/new/The-Quizzler/ClientSide/src/components/LoginPage.jsx":"5","/home/shivam/new/The-Quizzler/ClientSide/src/components/AttemptQuiz.jsx":"6","/home/shivam/new/The-Quizzler/ClientSide/src/components/AboutUs.jsx":"7","/home/shivam/new/The-Quizzler/ClientSide/src/components/Profile.jsx":"8","/home/shivam/new/The-Quizzler/ClientSide/src/components/CreateQuizPage.jsx":"9","/home/shivam/new/The-Quizzler/ClientSide/src/components/PastResultsPage.jsx":"10","/home/shivam/new/The-Quizzler/ClientSide/src/components/HomePage.jsx":"11","/home/shivam/new/The-Quizzler/ClientSide/src/components/QuizDetail.jsx":"12","/home/shivam/new/The-Quizzler/ClientSide/src/hooks/usebasic-input.jsx":"13","/home/shivam/new/The-Quizzler/ClientSide/src/components/AddQuestion.jsx":"14","/home/shivam/new/The-Quizzler/ClientSide/src/components/QuestionBox.jsx":"15","/home/shivam/new/The-Quizzler/ClientSide/src/components/SelectQuiz.jsx":"16","/home/shivam/new/The-Quizzler/ClientSide/src/components/AttempterResults.jsx":"17","/home/shivam/new/The-Quizzler/ClientSide/src/components/ListOfQuizzes.jsx":"18"},{"size":237,"mtime":1637235062435,"results":"19","hashOfConfig":"20"},{"size":2125,"mtime":1637656979501,"results":"21","hashOfConfig":"20"},{"size":3799,"mtime":1637383064784,"results":"22","hashOfConfig":"20"},{"size":1869,"mtime":1637657131026,"results":"23","hashOfConfig":"20"},{"size":3399,"mtime":1637383064752,"results":"24","hashOfConfig":"20"},{"size":3139,"mtime":1637501625481,"results":"25","hashOfConfig":"20"},{"size":2438,"mtime":1637650915424,"results":"26","hashOfConfig":"20"},{"size":3132,"mtime":1637650915424,"results":"27","hashOfConfig":"20"},{"size":6336,"mtime":1637650915424,"results":"28","hashOfConfig":"20"},{"size":2645,"mtime":1637652701803,"results":"29","hashOfConfig":"20"},{"size":2786,"mtime":1637650915424,"results":"30","hashOfConfig":"20"},{"size":688,"mtime":1637652691443,"results":"31","hashOfConfig":"20"},{"size":588,"mtime":1637235062435,"results":"32","hashOfConfig":"20"},{"size":5539,"mtime":1637405051968,"results":"33","hashOfConfig":"20"},{"size":717,"mtime":1637501625481,"results":"34","hashOfConfig":"20"},{"size":669,"mtime":1637501625481,"results":"35","hashOfConfig":"20"},{"size":1070,"mtime":1637656979505,"results":"36","hashOfConfig":"20"},{"size":1095,"mtime":1637656979505,"results":"37","hashOfConfig":"20"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},"1j6xx29",{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51","usedDeprecatedRules":"40"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56","usedDeprecatedRules":"40"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59","usedDeprecatedRules":"40"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62","usedDeprecatedRules":"40"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65","usedDeprecatedRules":"40"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68","usedDeprecatedRules":"40"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"79","messages":"80","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/home/shivam/new/The-Quizzler/ClientSide/src/index.js",[],["81","82"],"/home/shivam/new/The-Quizzler/ClientSide/src/App.jsx",[],"/home/shivam/new/The-Quizzler/ClientSide/src/components/RegisterPage.jsx",[],"/home/shivam/new/The-Quizzler/ClientSide/src/components/QuizCreated.jsx",["83"],"/home/shivam/new/The-Quizzler/ClientSide/src/components/LoginPage.jsx",[],"/home/shivam/new/The-Quizzler/ClientSide/src/components/AttemptQuiz.jsx",["84","85","86","87","88","89"],"import React from \"react\";\nimport { useEffect, useState, Fragment } from \"react\";\nimport Axios from \"axios\";\nimport { useNavigate, useParams, Link } from \"react-router-dom\";\nimport QuestionBox from \"./QuestionBox\";\n\nvar year = new Date();\nyear = year.getFullYear();\n\nfunction AttemptQuiz(props) {\n  const [state, setState] = useState(\"live\");\n  const isLoggedIn = props.loggedIn;\n  const navigate = useNavigate();\n  const [score, setScore] = useState(0);\n  const [response, setResponse] = useState(0);\n  const [allQues, setQues] = useState([]);\n  const [a, setA] = useState([]);\n  const params = useParams();\n  var s = 0;\n\n  const submitHandler = async () => {\n    if (response === a.length) {\n      setState(\"done\");\n\n      await Axios.post(\n        \"http://localhost:3001/updateUserQuizzesCompleted/\" + params.id,\n        {\n          quizId: params.id2,\n          marksScored: score,\n        }\n      );\n    }\n  };\n\n  const computedAnswer = (answer, correct) => {\n    console.log(answer, correct);\n    if (answer === correct) {\n      s++;\n      setScore(score + 1);\n    }\n    setResponse(response + 1);\n  };\n  useEffect(() => {\n    Axios.get(\"http://localhost:3001/getAllQuizzes\").then((response) => {\n      for (let i = 0; i < response.data.length; i++) {\n        if (response.data[i]._id === params.id2) {\n          setQues(response.data[i]);\n          setA(response.data[i].allQuestions);\n          break;\n        }\n      }\n\n      //WE ARE GETTING ALL OF OUR QUIZZES IN response\n    });\n  }, []);\n  const q = Object.values(allQues);\n  if (true) {\n    return (\n      <div>\n        <header>\n          <h1 onMouseDown={() => navigate(\"/homepage/\")}>Quizzler</h1>\n        </header>\n\n        <div className=\"AttemptPage\">\n          <div className=\"AttemptQuizTitle\">\n            <h1>{allQues.title}</h1>\n          </div>\n          <h4>\n            <div>\n              {state === \"live\" && (\n                <div>\n                  {a.map((q) => (\n                    <div className=\"QuestionContainer\">\n                      <QuestionBox\n                        question={q.Question}\n                        option1={q.option1}\n                        option2={q.option2}\n                        option3={q.option3}\n                        option4={q.option4}\n                        selected={(answer) => computedAnswer(answer, q.Answer)}\n                      />\n                    </div>\n                  ))}\n                  <div className=\"AttemptSubmit\">\n                    <button className=\"SubmitButton\" onClick={submitHandler}>\n                      {\" \"}\n                      Submit\n                    </button>\n                  </div>\n                </div>\n              )}\n              {response === a.length && state === \"done\" ? (\n                <h2>\n                  Your score is - {score} / {a.length}\n                </h2>\n              ) : null}\n            </div>\n          </h4>\n        </div>\n        <footer className=\"AttemptFooter\">\n          <p> CopyrightÂ© {year} </p>{\" \"}\n        </footer>\n      </div>\n    );\n  }\n  // navigate(\"/login\");   NAVIGATE IS NOT WORKING!??\n}\n\nexport default AttemptQuiz;\n","/home/shivam/new/The-Quizzler/ClientSide/src/components/AboutUs.jsx",[],"/home/shivam/new/The-Quizzler/ClientSide/src/components/Profile.jsx",["90","91"],"import React from \"react\";\nimport userIcons from \"../Images/gamer.png\";\nimport { useEffect, useState } from \"react\";\nimport Axios from \"axios\";\nimport { useParams, useNavigate } from \"react-router-dom\";\n\nvar year = new Date();\nyear = year.getFullYear();\n\nfunction Profile() {\n  const params = useParams();\n  const navigate = useNavigate();\n  const [userData, setUserData] = useState([]);\n  useEffect(() => {\n    Axios.get(\"http://localhost:3001/getUser/\" + params.id).then((response) => {\n      setUserData(response.data);\n      console.log(response.data);\n    });\n  }, []);\n  const data = Object.values(userData);\n\n  return (\n    <div>\n      <header>\n        <h1 onClick={() => navigate(\"/homepage/\" + params.id)}>Quizzler</h1>\n\n        <div className=\"ProfilenavbarItems\">\n          <nav onClick={() => navigate(\"/createquiz/\" + params.id)}>\n            Create a Quiz\n          </nav>\n          <nav onClick={() => navigate(\"/AboutUs/\" + params.id)}>About us</nav>\n          <nav onClick={() => navigate(\"/homepage/\" + params.id)}>\n            Start Quiz\n          </nav>\n          <nav>{userData.name}</nav>\n        </div>\n      </header>\n      <div className=\"profilePage\">\n        <div className=\"IntroSection\">\n          <img className=\"UserImage\" src={userIcons} alt=\"user icon\" />\n          <div>\n            <h1 className=\"Greetings\">Hello {userData.name}</h1>\n            <div className=\"UserDetails\">\n              {userData.quizzesCompleted && (\n                <div>\n                  <p>\n                    Quiz Attempted:{\" \"}\n                    <span className=\"NumOfQuizAttempted\">\n                      {\" \"}\n                      {userData.quizzesCompleted.length}\n                    </span>\n                  </p>\n                  <p>\n                    Quiz Created:{\" \"}\n                    {userData.quizzesCreated && (\n                      <span className=\"NumOfQuizCreated\">\n                        {\" \"}\n                        {userData.quizzesCreated.length}\n                      </span>\n                    )}\n                  </p>\n                </div>\n              )}\n            </div>\n          </div>\n        </div>\n        <div className=\"ResultsContainer\">\n          <div className=\"HostResult\">\n            <h1>Results of your Quizzes</h1>\n            <p>To check the results of the quizzes you created </p>\n            <button\n              type=\"button\"\n              onMouseDown={() => {\n                navigate(\"/listOfAllQuizzes/\" + userData._id);\n              }}\n            >\n              Click Here\n            </button>\n          </div>\n          <div className=\"QuizAttemptedResult\">\n            <h1>Your Past Results</h1>\n            <p>To check the results of the quizzes you attempted </p>\n            <button\n              type=\"button\"\n              onMouseDown={() => {\n                navigate(\"/pastResults/\" + userData._id);\n              }}\n            >\n              Click Here\n            </button>\n          </div>\n        </div>\n      </div>\n      <footer>\n        <p> CopyrightÂ© {year} </p>{\" \"}\n      </footer>\n    </div>\n  );\n}\n\nexport default Profile;\n","/home/shivam/new/The-Quizzler/ClientSide/src/components/CreateQuizPage.jsx",["92","93","94","95"],"import AddQuestion from \"./AddQuestion\";\nimport { useState, useEffect } from \"react\";\nimport useBasicInput from \"../hooks/usebasic-input\";\nimport React from \"react\";\nimport Axios from \"axios\";\nimport { useParams, useNavigate } from \"react-router-dom\";\n//import QuestionCard from \"./QuestionCard\";\n\nvar year = new Date();\nyear = year.getFullYear();\n\nconst CreateQuizPage = () => {\n  const navigate = useNavigate();\n  const params = useParams();\n  const [userData, setUserData] = useState({});\n\n  useEffect(() => {\n    Axios.get(\"http://localhost:3001/getUser/\" + params.id).then((response) => {\n      setUserData(response.data);\n    });\n  }, []);\n  const [allQutions, addques] = useState([]);\n  var x = 0;\n  var t = \"public\";\n  let quizCreatedId = \"\";\n  const Quiztype = (e) => {\n    t = e.target.value;\n  };\n  const data = (Q) => {\n    const item = Q;\n    addques([...allQutions, item]);\n    x++;\n    console.log(x);\n    //console.log(allQutions);\n  };\n  const {\n    value: title,\n    valueChangeHandler: titleChangeHandler,\n    valueIsValid: titleIsValid,\n    onBlurHandler: titleBlurHandler,\n    inputTouched: titleInputTouched,\n    reset: titleReset,\n  } = useBasicInput((value) => value.trim().length !== 0);\n\n  const {\n    value: Description,\n    valueChangeHandler: DescriptionChangeHandler,\n    valueIsValid: DescriptionIsValid,\n    onBlurHandler: DescriptionBlurHandler,\n    inputTouched: DescriptionInputTouched,\n    reset: DescriptionReset,\n  } = useBasicInput((value) => value.trim().length !== 0);\n\n  const submissionHandler = async (e) => {\n    e.preventDefault();\n    if (!formIsValid) {\n      return;\n    }\n    await Axios.post(\"http://localhost:3001/postQuiz\", {\n      title: title,\n      description: Description,\n      t: t,\n      allQuestions: allQutions,\n      userId: userData._id,\n    });\n\n    await Axios.get(\"http://localhost:3001/getAllQuizzes\").then((response) => {\n      response.data.map((val) => {\n        if (val.userId === userData._id && val.title === title) {\n          quizCreatedId = val._id;\n        }\n      });\n    });\n\n    await Axios.post(\n      \"http://localhost:3001/updateUserQuizzesCreated/\" + userData._id,\n      {\n        quizId: quizCreatedId,\n      }\n    );\n\n    await Axios.get(\"http://localhost:3001/getAllQuizzes\").then((response) => {\n      response.data.map((data) => {\n        if (data.description === Description && data.title === title) {\n          navigate(\"/quizCreated/\" + data._id);\n          return;\n        }\n      });\n    });\n\n    DescriptionReset();\n    titleReset();\n    //console.log(des.quizDescription, des.quizTitle);\n  };\n\n  const DescriptionInputClasses =\n    !DescriptionIsValid && DescriptionInputTouched ? \"invalid\" : \"\";\n  const titleInputClasses = !titleIsValid && titleInputTouched ? \"invalid\" : \"\";\n  const formIsValid =\n    DescriptionIsValid && titleIsValid && allQutions.length >= 1;\n\n  return (\n    <div>\n      <header>\n        <h1 onMouseDown={() => navigate(\"/homepage/\" + params.id)}>Quizzler</h1>\n        <div className=\"navbarItems\">\n          <nav\n            onClick={() => {\n              return (\n                <div>\n                  {\n                    navigate(\"/homepage/\" + params.id)\n                    //console.log(props.q.allQuestions)\n                  }\n                </div>\n              );\n            }}\n          >\n            Attempt a Quiz\n          </nav>\n          <nav onClick={() => navigate(\"/AboutUs/\" + params.id)}>About us</nav>\n          <nav>{userData.name}</nav>\n        </div>\n      </header>\n      <div className=\"CreateQuizPage\">\n        <form onSubmit={submissionHandler}>\n          <div className=\"QuizInfoContainer\">\n            <div className={`form-control ${titleInputClasses}`}>\n              <label className=\"quizTitle\">Quiz Title</label>\n              <br />\n              <input\n                type=\"textarea\"\n                value={title}\n                onBlur={titleBlurHandler}\n                onChange={titleChangeHandler}\n                className=\"quizTitleInput\"\n              />\n              <br />\n            </div>\n            <div className={`form-control ${DescriptionInputClasses}`}>\n              <label className=\"quizDescription\">Quiz Description</label>\n              <br />\n              <textarea\n                value={Description}\n                onBlur={DescriptionBlurHandler}\n                onChange={DescriptionChangeHandler}\n                className=\"quizDescriptionInput\"\n                rows=\"30\"\n                cols=\"70\"\n              />\n              <br />\n            </div>\n            <div className={`form-control`} onClick={Quiztype}>\n              <div className=\"Quiztype\">\n                <div className=\"PrivateRadio\">\n                  <label>Private</label>\n                  <input\n                    className=\"RadioInput\"\n                    type=\"radio\"\n                    name=\"quiz-type\"\n                    value=\"private\"\n                  />\n                </div>\n                <div className=\"PublicRadio\">\n                  <label>Public</label>\n                  <input\n                    className=\"RadioInput\"\n                    type=\"radio\"\n                    name=\"quiz-type\"\n                    value=\"public\"\n                    checked\n                  />\n                </div>\n              </div>\n            </div>\n          </div>\n          <div className={`form-control`}>\n            {allQutions.length >= 1 && (\n              <div className=\"QuizInfoContainer\">\n                {allQutions.map((q, key) => (\n                  <div>\n                    Question {key + 1}) {q.Question}\n                  </div>\n                ))}\n              </div>\n            )}\n            <section>\n              {\n                <div className=\"QuestionCard\">\n                  <strong>Question</strong>\n                  <br></br>\n                  <br></br>\n\n                  <AddQuestion data={data} />\n                </div>\n              }\n            </section>\n          </div>\n          <div>\n            <button className=\"form-actions\" type=\"submit\" value=\"Create Quiz\">\n              {\" \"}\n              Create Quiz !\n            </button>\n          </div>\n        </form>\n      </div>\n      <footer>\n        <p> CopyrightÂ© {year} </p>{\" \"}\n      </footer>\n    </div>\n  );\n};\n\nexport default CreateQuizPage;\n","/home/shivam/new/The-Quizzler/ClientSide/src/components/PastResultsPage.jsx",["96","97"],"import { useParams, useNavigate } from \"react-router-dom\";\nimport { useEffect, useState } from \"react\";\nimport Axios from \"axios\";\nimport QuizDetail from \"./QuizDetail\";\n\nconst PastResultsPage = () => {\n  const params = useParams();\n  const [userData, setData] = useState([]);\n  const navigate = useNavigate();\n\n  useEffect(() => {\n    Axios.get(\"http://localhost:3001/getUser/\" + params.id).then((response) => {\n      setData(response.data);\n      console.log(response.data);\n    });\n  }, []);\n\n  return (\n    <div>\n      <header>\n        <h1 onClick={() => navigate(\"/homepage/\" + params.id)}>Quizzler</h1>\n\n        <div className=\"ProfilenavbarItems\">\n          <nav onClick={() => navigate(\"/createquiz/\" + params.id)}>\n            Create a Quiz\n          </nav>\n          <nav onClick={() => navigate(\"/AboutUs/\" + params.id)}>About us</nav>\n          <nav>Start Quiz</nav>\n          <nav onClick={() => navigate(\"/Profile/\" + params.id)}>\n            {userData.name}\n          </nav>\n        </div>\n      </header>\n      <div className=\"QuizContent\">\n        {userData.quizzesCompleted && (\n          <div>\n            <h1 id='title'>Past Results</h1>\n            <table id = \"Results\">\n                  <tbody>\n                  <tr>\n                  <td>\n                      <h3>s/no</h3>\n                  </td>\n                  <td>\n                      <h3>Quiz Title</h3>\n                  </td>\n                  <td>\n                      <h3>score</h3>\n                  </td>\n                  </tr>\n                  {userData.quizzesCompleted.map((q, key) => (\n                  <tr key = {key}>\n                    <td> \n                      {\" \"}\n                      {key + 1} \n                    </td>\n                    <td>\n                      {<QuizDetail quizId={q.quizId} />}\n                    </td>\n                    <td>\n                      ({q.marksScored})/{<QuizMarks quizId={q.quizId}/>}\n                    </td>\n                  </tr>\n            ))}\n             </tbody>\n        </table>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\nconst QuizMarks = (props) =>{\n\n  const [quiz,setQuiz] = useState([]);\n  useEffect(() => {\n      Axios.get(\"http://localhost:3001/getAllQuizzes\").then((response) =>{\n          for (let i = 0; i < response.data.length; i++)\n          {\n            if(props.quizId === response.data[i]._id)\n            {\n                  setQuiz([response.data[i].allQuestions.length])\n                  break;\n            }\n          }\n        }\n        );\n    }, []);\n\n  return (\n      <span> {quiz} </span>\n          \n  )\n}\nexport default PastResultsPage;\n","/home/shivam/new/The-Quizzler/ClientSide/src/components/HomePage.jsx",["98","99"],"import React from \"react\";\nimport { useEffect, useState } from \"react\";\nimport Axios from \"axios\";\nimport { useParams, useNavigate } from \"react-router-dom\";\nimport SelectQuiz from \"./SelectQuiz\";\n\nvar year = new Date();\nyear = year.getFullYear();\n\nfunction HomePage(props) {\n  const [isLoggedIn, setIsLoggedIn] = useState(props.loggedIn);\n\n  // const id = props.id;\n  const [name, setName] = useState(\"\");\n  const [allQuizzes, setAllQuizzes] = useState({});\n  const navigate = useNavigate();\n  const params = useParams();\n\n  useEffect(() => {\n    Axios.get(\"http://localhost:3001/getUser/\" + params.id).then(\n      (response) => {\n        setName(response.data.name);\n      }\n      //WE ARE GETTING ALL OF OUR USER DATA IN response.data\n    );\n\n    Axios.get(\"http://localhost:3001/getAllQuizzes\").then((response) => {\n      setAllQuizzes(response.data);\n\n      //WE ARE GETTING ALL OF OUR QUIZZES IN response\n    });\n\n    if (params.id == undefined) {\n      setIsLoggedIn(false);\n    } else {\n      setIsLoggedIn(true);\n    }\n  }, []);\n  const q = Object.values(allQuizzes);\n  if (true) {\n    return (\n      <div>\n        <header>\n          <h1 onMouseDown={() => navigate(\"/homepage/\" + params.id)}>\n            Quizzler\n          </h1>\n          <div className=\"navbarItems\">\n            <nav onClick={() => navigate(\"/createquiz/\" + params.id)}>\n              Create a Quiz\n            </nav>\n            <nav onClick={() => navigate(\"/AboutUs/\" + params.id)}>\n              About us\n            </nav>\n\n            <nav\n              className=\"UserName\"\n              onMouseDown={() => {\n                navigate(\"/profile/\" + params.id);\n              }}\n            >\n              {name}\n            </nav>\n            {/* <nav>\n              {!isLoggedIn && (\n                <div className=\"Signup\">\n                  <button\n                    onClick={() => {\n                      return <div> {navigate(\"/register\")}</div>;\n                    }}\n                  >\n                    Sign Up\n                  </button>\n                </div>\n              )}\n            </nav> */}\n          </div>\n        </header>\n        <div className=\"HomePage\">\n          <div>{console.log(q)}</div>\n          <div className=\"QuizContent\">\n            {q.map((q, key) => {\n              return (\n                <div>\n                  <SelectQuiz\n                    key={key}\n                    q={q}\n                    isLoggedIn={isLoggedIn}\n                    id={params.id}\n                  />\n                </div>\n              );\n            })}\n          </div>\n        </div>\n        <footer>\n          <p> CopyrightÂ© {year} </p>{\" \"}\n        </footer>\n      </div>\n    );\n  }\n  // navigate(\"/login\"); NAVIGATE IS NOT WORKING!??\n}\n\nexport default HomePage;\n","/home/shivam/new/The-Quizzler/ClientSide/src/components/QuizDetail.jsx",["100"],"//import { useParams,useNavigate } from \"react-router-dom\";\nimport { useEffect,useState} from \"react\";\nimport Axios from \"axios\";\n\nconst QuizDetail = (props) =>{\n\n    const [quiz,setQuiz] = useState([]);\n    useEffect(() => {\n        Axios.get(\"http://localhost:3001/getAllQuizzes\").then((response) =>{\n            for (let i = 0; i < response.data.length; i++)\n            {\n              if(props.quizId === response.data[i]._id)\n              {\n                    setQuiz([response.data[i].title])\n                    break;\n              }\n            }\n          }\n          );\n      }, []);\n\n    return (\n        <span> {quiz} </span>\n            \n    )\n}\nexport default QuizDetail","/home/shivam/new/The-Quizzler/ClientSide/src/hooks/usebasic-input.jsx",[],"/home/shivam/new/The-Quizzler/ClientSide/src/components/AddQuestion.jsx",[],"/home/shivam/new/The-Quizzler/ClientSide/src/components/QuestionBox.jsx",[],"/home/shivam/new/The-Quizzler/ClientSide/src/components/SelectQuiz.jsx",[],"/home/shivam/new/The-Quizzler/ClientSide/src/components/AttempterResults.jsx",["101"],"/home/shivam/new/The-Quizzler/ClientSide/src/components/ListOfQuizzes.jsx",["102"],{"ruleId":"103","replacedBy":"104"},{"ruleId":"105","replacedBy":"106"},{"ruleId":"107","severity":1,"message":"108","line":15,"column":6,"nodeType":"109","endLine":15,"endColumn":8,"suggestions":"110"},{"ruleId":"111","severity":1,"message":"112","line":2,"column":31,"nodeType":"113","messageId":"114","endLine":2,"endColumn":39},{"ruleId":"111","severity":1,"message":"115","line":4,"column":34,"nodeType":"113","messageId":"114","endLine":4,"endColumn":38},{"ruleId":"111","severity":1,"message":"116","line":12,"column":9,"nodeType":"113","messageId":"114","endLine":12,"endColumn":19},{"ruleId":"111","severity":1,"message":"117","line":19,"column":7,"nodeType":"113","messageId":"114","endLine":19,"endColumn":8},{"ruleId":"107","severity":1,"message":"118","line":55,"column":6,"nodeType":"109","endLine":55,"endColumn":8,"suggestions":"119"},{"ruleId":"111","severity":1,"message":"120","line":56,"column":9,"nodeType":"113","messageId":"114","endLine":56,"endColumn":10},{"ruleId":"107","severity":1,"message":"108","line":19,"column":6,"nodeType":"109","endLine":19,"endColumn":8,"suggestions":"121"},{"ruleId":"111","severity":1,"message":"122","line":20,"column":9,"nodeType":"113","messageId":"114","endLine":20,"endColumn":13},{"ruleId":"107","severity":1,"message":"108","line":21,"column":6,"nodeType":"109","endLine":21,"endColumn":8,"suggestions":"123"},{"ruleId":"124","severity":1,"message":"125","line":68,"column":31,"nodeType":"126","messageId":"127","endLine":68,"endColumn":33},{"ruleId":"124","severity":1,"message":"128","line":83,"column":32,"nodeType":"126","messageId":"129","endLine":83,"endColumn":34},{"ruleId":"124","severity":1,"message":"125","line":86,"column":11,"nodeType":"130","messageId":"131","endLine":86,"endColumn":18},{"ruleId":"107","severity":1,"message":"108","line":16,"column":6,"nodeType":"109","endLine":16,"endColumn":8,"suggestions":"132"},{"ruleId":"107","severity":1,"message":"133","line":88,"column":8,"nodeType":"109","endLine":88,"endColumn":10,"suggestions":"134"},{"ruleId":"135","severity":1,"message":"136","line":33,"column":19,"nodeType":"137","messageId":"138","endLine":33,"endColumn":21},{"ruleId":"107","severity":1,"message":"108","line":38,"column":6,"nodeType":"109","endLine":38,"endColumn":8,"suggestions":"139"},{"ruleId":"107","severity":1,"message":"133","line":20,"column":10,"nodeType":"109","endLine":20,"endColumn":12,"suggestions":"140"},{"ruleId":"107","severity":1,"message":"141","line":19,"column":6,"nodeType":"109","endLine":19,"endColumn":8,"suggestions":"142"},{"ruleId":"107","severity":1,"message":"143","line":17,"column":6,"nodeType":"109","endLine":17,"endColumn":8,"suggestions":"144"},"no-native-reassign",["145"],"no-negated-in-lhs",["146"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'params.id'. Either include it or remove the dependency array.","ArrayExpression",["147"],"no-unused-vars","'Fragment' is defined but never used.","Identifier","unusedVar","'Link' is defined but never used.","'isLoggedIn' is assigned a value but never used.","'s' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'params.id2'. Either include it or remove the dependency array.",["148"],"'q' is assigned a value but never used.",["149"],"'data' is assigned a value but never used.",["150"],"array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","Array.prototype.map() expects a value to be returned at the end of arrow function.","expectedAtEnd","ReturnStatement","expectedReturnValue",["151"],"React Hook useEffect has a missing dependency: 'props.quizId'. Either include it or remove the dependency array.",["152"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected",["153"],["154"],"React Hook useEffect has missing dependencies: 'params.hostId' and 'params.quizId'. Either include them or remove the dependency array.",["155"],"React Hook useEffect has a missing dependency: 'params.userId'. Either include it or remove the dependency array.",["156"],"no-global-assign","no-unsafe-negation",{"desc":"157","fix":"158"},{"desc":"159","fix":"160"},{"desc":"157","fix":"161"},{"desc":"157","fix":"162"},{"desc":"157","fix":"163"},{"desc":"164","fix":"165"},{"desc":"157","fix":"166"},{"desc":"164","fix":"167"},{"desc":"168","fix":"169"},{"desc":"170","fix":"171"},"Update the dependencies array to be: [params.id]",{"range":"172","text":"173"},"Update the dependencies array to be: [params.id2]",{"range":"174","text":"175"},{"range":"176","text":"173"},{"range":"177","text":"173"},{"range":"178","text":"173"},"Update the dependencies array to be: [props.quizId]",{"range":"179","text":"180"},{"range":"181","text":"173"},{"range":"182","text":"180"},"Update the dependencies array to be: [params.hostId, params.quizId]",{"range":"183","text":"184"},"Update the dependencies array to be: [params.userId]",{"range":"185","text":"186"},[438,440],"[params.id]",[1496,1498],"[params.id2]",[570,572],[641,643],[490,492],[2551,2553],"[props.quizId]",[1033,1035],[593,595],[569,571],"[params.hostId, params.quizId]",[515,517],"[params.userId]"]