[{"C:\\Users\\Abhijeet\\Desktop\\New folder\\The-Quizzler\\ClientSide\\src\\index.js":"1","C:\\Users\\Abhijeet\\Desktop\\New folder\\The-Quizzler\\ClientSide\\src\\App.jsx":"2","C:\\Users\\Abhijeet\\Desktop\\New folder\\The-Quizzler\\ClientSide\\src\\components\\CreateQuizPage.jsx":"3","C:\\Users\\Abhijeet\\Desktop\\New folder\\The-Quizzler\\ClientSide\\src\\components\\LoginPage.jsx":"4","C:\\Users\\Abhijeet\\Desktop\\New folder\\The-Quizzler\\ClientSide\\src\\components\\HomePage.jsx":"5","C:\\Users\\Abhijeet\\Desktop\\New folder\\The-Quizzler\\ClientSide\\src\\components\\Profile.jsx":"6","C:\\Users\\Abhijeet\\Desktop\\New folder\\The-Quizzler\\ClientSide\\src\\components\\RegisterPage.jsx":"7","C:\\Users\\Abhijeet\\Desktop\\New folder\\The-Quizzler\\ClientSide\\src\\components\\AttemptQuiz.jsx":"8","C:\\Users\\Abhijeet\\Desktop\\New folder\\The-Quizzler\\ClientSide\\src\\components\\QuizCreated.jsx":"9","C:\\Users\\Abhijeet\\Desktop\\New folder\\The-Quizzler\\ClientSide\\src\\components\\PastResultsPage.jsx":"10","C:\\Users\\Abhijeet\\Desktop\\New folder\\The-Quizzler\\ClientSide\\src\\components\\AddQuestion.jsx":"11","C:\\Users\\Abhijeet\\Desktop\\New folder\\The-Quizzler\\ClientSide\\src\\components\\SelectQuiz.jsx":"12","C:\\Users\\Abhijeet\\Desktop\\New folder\\The-Quizzler\\ClientSide\\src\\components\\QuestionBox.jsx":"13","C:\\Users\\Abhijeet\\Desktop\\New folder\\The-Quizzler\\ClientSide\\src\\components\\QuizDetail.jsx":"14","C:\\Users\\Abhijeet\\Desktop\\New folder\\The-Quizzler\\ClientSide\\src\\hooks\\usebasic-input.jsx":"15","C:\\Users\\Abhijeet\\Desktop\\New folder\\The-Quizzler\\ClientSide\\src\\components\\AttempterResults.jsx":"16","C:\\Users\\Abhijeet\\Desktop\\New folder\\The-Quizzler\\ClientSide\\src\\components\\ListOfQuizzes.jsx":"17"},{"size":249,"mtime":1637638379387,"results":"18","hashOfConfig":"19"},{"size":2180,"mtime":1637641844072,"results":"20","hashOfConfig":"19"},{"size":6500,"mtime":1637638379380,"results":"21","hashOfConfig":"19"},{"size":3515,"mtime":1637638379381,"results":"22","hashOfConfig":"19"},{"size":2935,"mtime":1637641841530,"results":"23","hashOfConfig":"19"},{"size":3235,"mtime":1637641510042,"results":"24","hashOfConfig":"19"},{"size":3921,"mtime":1637638379384,"results":"25","hashOfConfig":"19"},{"size":3248,"mtime":1637638379379,"results":"26","hashOfConfig":"19"},{"size":486,"mtime":1637638379383,"results":"27","hashOfConfig":"19"},{"size":2264,"mtime":1637638379382,"results":"28","hashOfConfig":"19"},{"size":5723,"mtime":1637638379379,"results":"29","hashOfConfig":"19"},{"size":696,"mtime":1637638379384,"results":"30","hashOfConfig":"19"},{"size":750,"mtime":1637638379382,"results":"31","hashOfConfig":"19"},{"size":714,"mtime":1637638379383,"results":"32","hashOfConfig":"19"},{"size":620,"mtime":1637638379385,"results":"33","hashOfConfig":"19"},{"size":616,"mtime":1637641347284,"results":"34","hashOfConfig":"19"},{"size":704,"mtime":1637640644208,"results":"35","hashOfConfig":"19"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},"1ogu6sj",{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"41","messages":"42","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43","usedDeprecatedRules":"38"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"48","messages":"49","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54","usedDeprecatedRules":"38"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"38"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60","usedDeprecatedRules":"38"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69","usedDeprecatedRules":"38"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"74","messages":"75","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\Abhijeet\\Desktop\\New folder\\The-Quizzler\\ClientSide\\src\\index.js",[],["76","77"],"C:\\Users\\Abhijeet\\Desktop\\New folder\\The-Quizzler\\ClientSide\\src\\App.jsx",[],"C:\\Users\\Abhijeet\\Desktop\\New folder\\The-Quizzler\\ClientSide\\src\\components\\CreateQuizPage.jsx",["78","79","80","81"],"import AddQuestion from \"./AddQuestion\";\r\nimport { useState, useEffect } from \"react\";\r\nimport useBasicInput from \"../hooks/usebasic-input\";\r\nimport React from \"react\";\r\nimport Axios from \"axios\";\r\nimport { useParams, useNavigate } from \"react-router-dom\";\r\n//import QuestionCard from \"./QuestionCard\";\r\n\r\nvar year = new Date();\r\nyear = year.getFullYear();\r\n\r\nconst CreateQuizPage = () => {\r\n  const navigate = useNavigate();\r\n  const params = useParams();\r\n  const [userData, setUserData] = useState({});\r\n\r\n  useEffect(() => {\r\n    Axios.get(\"http://localhost:3001/getUser/\" + params.id).then((response) => {\r\n      setUserData(response.data);\r\n    });\r\n  }, []);\r\n  const [allQutions, addques] = useState([]);\r\n  var x = 0;\r\n  var t = \"public\";\r\n  let quizCreatedId = \"\";\r\n  const Quiztype = (e) => {\r\n    t = e.target.value;\r\n  };\r\n  const data = (Q) => {\r\n    const item = Q;\r\n    addques([...allQutions, item]);\r\n    x++;\r\n    console.log(x);\r\n    //console.log(allQutions);\r\n  };\r\n  const {\r\n    value: title,\r\n    valueChangeHandler: titleChangeHandler,\r\n    valueIsValid: titleIsValid,\r\n    onBlurHandler: titleBlurHandler,\r\n    inputTouched: titleInputTouched,\r\n    reset: titleReset,\r\n  } = useBasicInput((value) => value.trim().length !== 0);\r\n\r\n  const {\r\n    value: Description,\r\n    valueChangeHandler: DescriptionChangeHandler,\r\n    valueIsValid: DescriptionIsValid,\r\n    onBlurHandler: DescriptionBlurHandler,\r\n    inputTouched: DescriptionInputTouched,\r\n    reset: DescriptionReset,\r\n  } = useBasicInput((value) => value.trim().length !== 0);\r\n\r\n  const submissionHandler = async (e) => {\r\n    e.preventDefault();\r\n    if (!formIsValid) {\r\n      return;\r\n    }\r\n    await Axios.post(\"http://localhost:3001/postQuiz\", {\r\n      title: title,\r\n      description: Description,\r\n      t: t,\r\n      allQuestions: allQutions,\r\n      userId: userData._id,\r\n    });\r\n\r\n    await Axios.get(\"http://localhost:3001/getAllQuizzes\").then((response) => {\r\n      response.data.map((val) => {\r\n        if (val.userId === userData._id && val.title === title) {\r\n          quizCreatedId = val._id;\r\n        }\r\n      });\r\n    });\r\n\r\n    await Axios.post(\r\n      \"http://localhost:3001/updateUserQuizzesCreated/\" + userData._id,\r\n      {\r\n        quizId: quizCreatedId,\r\n      }\r\n    );\r\n\r\n    await Axios.get(\"http://localhost:3001/getAllQuizzes\").then((response) => {\r\n      response.data.map((data) => {\r\n        if (data.description === Description && data.title === title) {\r\n          navigate(\"/quizCreated/\" + data._id);\r\n          return;\r\n        }\r\n      });\r\n    });\r\n\r\n    DescriptionReset();\r\n    titleReset();\r\n    //console.log(des.quizDescription, des.quizTitle);\r\n  };\r\n\r\n  const DescriptionInputClasses =\r\n    !DescriptionIsValid && DescriptionInputTouched ? \"invalid\" : \"\";\r\n  const titleInputClasses = !titleIsValid && titleInputTouched ? \"invalid\" : \"\";\r\n  const formIsValid =\r\n    DescriptionIsValid && titleIsValid && allQutions.length >= 1;\r\n\r\n  return (\r\n    <div>\r\n      <header>\r\n        <h1 onMouseDown={() => navigate(\"/homepage/\" + params.id)}>Quizzler</h1>\r\n        <div className=\"navbarItems\">\r\n          <nav\r\n            onClick={() => {\r\n              return (\r\n                <div>\r\n                  {\r\n                    navigate(\"/homepage/\" + params.id)\r\n                    //console.log(props.q.allQuestions)\r\n                  }\r\n                </div>\r\n              );\r\n            }}\r\n          >\r\n            Attempt a Quiz\r\n          </nav>\r\n          <nav>About us</nav>\r\n          <nav>{userData.name}</nav>\r\n        </div>\r\n      </header>\r\n      <div className=\"CreateQuizPage\">\r\n        <form onSubmit={submissionHandler}>\r\n          <div className=\"QuizInfoContainer\">\r\n            <div className={`form-control ${titleInputClasses}`}>\r\n              <label className=\"quizTitle\">Quiz Title</label>\r\n              <br />\r\n              <input\r\n                type=\"textarea\"\r\n                value={title}\r\n                onBlur={titleBlurHandler}\r\n                onChange={titleChangeHandler}\r\n                className=\"quizTitleInput\"\r\n              />\r\n              <br />\r\n            </div>\r\n            <div className={`form-control ${DescriptionInputClasses}`}>\r\n              <label className=\"quizDescription\">Quiz Description</label>\r\n              <br />\r\n              <textarea\r\n                value={Description}\r\n                onBlur={DescriptionBlurHandler}\r\n                onChange={DescriptionChangeHandler}\r\n                className=\"quizDescriptionInput\"\r\n                rows=\"30\"\r\n                cols=\"70\"\r\n              />\r\n              <br />\r\n            </div>\r\n            <div className={`form-control`} onClick={Quiztype}>\r\n              <div className=\"Quiztype\">\r\n                <div className=\"PrivateRadio\">\r\n                  <label>Private</label>\r\n                  <input\r\n                    className=\"RadioInput\"\r\n                    type=\"radio\"\r\n                    name=\"quiz-type\"\r\n                    value=\"private\"\r\n                  />\r\n                </div>\r\n                <div className=\"PublicRadio\">\r\n                  <label>Public</label>\r\n                  <input\r\n                    className=\"RadioInput\"\r\n                    type=\"radio\"\r\n                    name=\"quiz-type\"\r\n                    value=\"public\"\r\n                    checked\r\n                  />\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div className={`form-control`}>\r\n            {allQutions.length >= 1 && (\r\n              <div className=\"QuizInfoContainer\">\r\n                {allQutions.map((q, key) => (\r\n                  <div>\r\n                    Question {key + 1}) {q.Question}\r\n                  </div>\r\n                ))}\r\n              </div>\r\n            )}\r\n            <section>\r\n              {\r\n                <div className=\"QuestionCard\">\r\n                  <strong>Question</strong>\r\n                  <br></br>\r\n                  <br></br>\r\n\r\n                  <AddQuestion data={data} />\r\n                </div>\r\n              }\r\n            </section>\r\n          </div>\r\n          <div>\r\n            <button className=\"form-actions\" type=\"submit\" value=\"Create Quiz\">\r\n              {\" \"}\r\n              Create Quiz !\r\n            </button>\r\n          </div>\r\n        </form>\r\n      </div>\r\n      <footer>\r\n        <p> Copyright© {year} </p>{\" \"}\r\n      </footer>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CreateQuizPage;\r\n","C:\\Users\\Abhijeet\\Desktop\\New folder\\The-Quizzler\\ClientSide\\src\\components\\LoginPage.jsx",[],"C:\\Users\\Abhijeet\\Desktop\\New folder\\The-Quizzler\\ClientSide\\src\\components\\HomePage.jsx",["82","83","84","85","86"],"C:\\Users\\Abhijeet\\Desktop\\New folder\\The-Quizzler\\ClientSide\\src\\components\\Profile.jsx",["87","88"],"C:\\Users\\Abhijeet\\Desktop\\New folder\\The-Quizzler\\ClientSide\\src\\components\\RegisterPage.jsx",[],"C:\\Users\\Abhijeet\\Desktop\\New folder\\The-Quizzler\\ClientSide\\src\\components\\AttemptQuiz.jsx",["89","90","91","92","93","94"],"import React from \"react\";\r\nimport { useEffect, useState, Fragment } from \"react\";\r\nimport Axios from \"axios\";\r\nimport { useNavigate, useParams, Link } from \"react-router-dom\";\r\nimport QuestionBox from \"./QuestionBox\";\r\n\r\nvar year = new Date();\r\nyear = year.getFullYear();\r\n\r\nfunction AttemptQuiz(props) {\r\n  const [state, setState] = useState(\"live\");\r\n  const isLoggedIn = props.loggedIn;\r\n  const navigate = useNavigate();\r\n  const [score, setScore] = useState(0);\r\n  const [response, setResponse] = useState(0);\r\n  const [allQues, setQues] = useState([]);\r\n  const [a, setA] = useState([]);\r\n  const params = useParams();\r\n  var s = 0;\r\n\r\n  const submitHandler = async () => {\r\n    if (response === a.length) {\r\n      setState(\"done\");\r\n\r\n      await Axios.post(\r\n        \"http://localhost:3001/updateUserQuizzesCompleted/\" + params.id,\r\n        {\r\n          quizId: params.id2,\r\n          marksScored: score,\r\n        }\r\n      );\r\n    }\r\n  };\r\n\r\n  const computedAnswer = (answer, correct) => {\r\n    console.log(answer, correct);\r\n    if (answer === correct) {\r\n      s++;\r\n      setScore(score + 1);\r\n    }\r\n    setResponse(response + 1);\r\n  };\r\n  useEffect(() => {\r\n    Axios.get(\"http://localhost:3001/getAllQuizzes\").then((response) => {\r\n      for (let i = 0; i < response.data.length; i++) {\r\n        if (response.data[i]._id === params.id2) {\r\n          setQues(response.data[i]);\r\n          setA(response.data[i].allQuestions);\r\n          break;\r\n        }\r\n      }\r\n\r\n      //WE ARE GETTING ALL OF OUR QUIZZES IN response\r\n    });\r\n  }, []);\r\n  const q = Object.values(allQues);\r\n  if (true) {\r\n    return (\r\n      <div>\r\n        <header>\r\n          <h1 onMouseDown={() => navigate(\"/homepage/\")}>Quizzler</h1>\r\n        </header>\r\n\r\n        <div className=\"AttemptPage\">\r\n          <div className=\"AttemptQuizTitle\">\r\n            <h1>{allQues.title}</h1>\r\n          </div>\r\n          <h4>\r\n            <div>\r\n              {state === \"live\" && (\r\n                <div>\r\n                  {a.map((q) => (\r\n                    <div className=\"QuestionContainer\">\r\n                      <QuestionBox\r\n                        question={q.Question}\r\n                        option1={q.option1}\r\n                        option2={q.option2}\r\n                        option3={q.option3}\r\n                        option4={q.option4}\r\n                        selected={(answer) => computedAnswer(answer, q.Answer)}\r\n                      />\r\n                    </div>\r\n                  ))}\r\n                  <div className=\"AttemptSubmit\">\r\n                    <button className=\"SubmitButton\" onClick={submitHandler}>\r\n                      {\" \"}\r\n                      Submit\r\n                    </button>\r\n                  </div>\r\n                </div>\r\n              )}\r\n              {response === a.length && state === \"done\" ? (\r\n                <h2>\r\n                  Your score is - {score} / {a.length}\r\n                </h2>\r\n              ) : null}\r\n            </div>\r\n          </h4>\r\n        </div>\r\n        <footer className=\"AttemptFooter\">\r\n          <p> Copyright© {year} </p>{\" \"}\r\n        </footer>\r\n      </div>\r\n    );\r\n  }\r\n  // navigate(\"/login\");   NAVIGATE IS NOT WORKING!??\r\n}\r\n\r\nexport default AttemptQuiz;\r\n","C:\\Users\\Abhijeet\\Desktop\\New folder\\The-Quizzler\\ClientSide\\src\\components\\QuizCreated.jsx",["95"],"import { useEffect } from \"react\";\r\nimport Axios from \"axios\";\r\nimport { useParams } from \"react-router-dom\";\r\n\r\nconst QuizCreated = () => {\r\n  const params = useParams();\r\n\r\n  useEffect(() => {\r\n    Axios.get(\"http://localhost:3001/getQuiz/\" + params.id).then((response) => {\r\n      console.log(response);\r\n    });\r\n  }, []);\r\n\r\n  return (\r\n    <div>\r\n      This page shows the quiz user just created!(Look at the browser console)\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default QuizCreated;\r\n","C:\\Users\\Abhijeet\\Desktop\\New folder\\The-Quizzler\\ClientSide\\src\\components\\PastResultsPage.jsx",["96","97","98","99","100","101"],"import { useParams,useNavigate } from \"react-router-dom\";\r\nimport { Component, useEffect,useState} from \"react\";\r\nimport Axios from \"axios\";\r\nimport QuizDetail from \"./QuizDetail\";\r\n\r\nconst PastResultsPage = () => {\r\n  const params = useParams();\r\n  const [userData,setData] = useState([]);\r\n  const [quiz,setquiz] = useState([]);\r\n  const [quizz,setquizz] = useState([]);\r\n  const navigate = useNavigate();\r\n  var q = []\r\n  \r\n\r\n  useEffect(() => {\r\n    Axios.get(\"http://localhost:3001/readUser/\").then((response) => {\r\n      for (let i = 0; i < response.data.length; i++) {\r\n        if (params.id === response.data[i]._id) \r\n      {setData(response.data[i]);\r\n      console.log(response.data[i]);}\r\n    }});\r\n  }, []);\r\n  var u = 0;\r\n  const getQuiz = (quizId)=>{\r\n    Axios.get(\"http://localhost:3001/getAllQuizzes\").then((response)=>\r\n        {\r\n          for (let i = 0; i < response.data.length; i++)\r\n          {\r\n            if(quizId === response.data[i]._id)\r\n            {\r\n                  setquiz([response.data[i].title])\r\n                  console.log(response.data[i].title)\r\n                  \r\n                  break;\r\n            }\r\n          }\r\n        }\r\n        )\r\n       return(quiz)       \r\n  }\r\n  const getQuizz = ()=>{\r\n    if(userData.quizzesCompleted){\r\n    userData.quizzesCompleted.map((q,key)=>{\r\n      setquizz([...quizz,getQuiz(q.quizId)])\r\n    })\r\n  }\r\n  }\r\n  //useEffect(getQuizz,[])\r\n  \r\n  return (\r\n    <div>\r\n      <header>\r\n        <h1 onClick={() => navigate(\"/homepage/\" + params.id)}>Quizzler</h1>\r\n\r\n        <ul className=\"ProfilenavbarItems\">\r\n          <li onClick={() => navigate(\"/createquiz/\" + params.id)}>\r\n            Create a Quiz\r\n          </li>\r\n          <li>About us</li>\r\n          <li>Start Quiz</li>\r\n          <li>{userData.name}</li>\r\n        </ul>\r\n      </header>\r\n      <div className=\"QuizContent\">\r\n      {userData.quizzesCompleted && \r\n      (<div>\r\n        {userData.quizzesCompleted.map((q,key)=><div key = {key}> {key+1})  {<QuizDetail quizId={q.quizId}/>}       ({q.marksScored})\r\n        </div>)}\r\n        <div>\r\n          {\r\n            console.log(quizz)\r\n          }\r\n        </div>\r\n        \r\n       </div>)}\r\n\r\n        </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PastResultsPage;\r\n","C:\\Users\\Abhijeet\\Desktop\\New folder\\The-Quizzler\\ClientSide\\src\\components\\AddQuestion.jsx",[],"C:\\Users\\Abhijeet\\Desktop\\New folder\\The-Quizzler\\ClientSide\\src\\components\\SelectQuiz.jsx",[],"C:\\Users\\Abhijeet\\Desktop\\New folder\\The-Quizzler\\ClientSide\\src\\components\\QuestionBox.jsx",[],"C:\\Users\\Abhijeet\\Desktop\\New folder\\The-Quizzler\\ClientSide\\src\\components\\QuizDetail.jsx",["102"],"//import { useParams,useNavigate } from \"react-router-dom\";\r\nimport { useEffect,useState} from \"react\";\r\nimport Axios from \"axios\";\r\n\r\nconst QuizDetail = (props) =>{\r\n\r\n    const [quiz,setQuiz] = useState([]);\r\n    useEffect(() => {\r\n        Axios.get(\"http://localhost:3001/getAllQuizzes\").then((response) =>{\r\n            for (let i = 0; i < response.data.length; i++)\r\n            {\r\n              if(props.quizId === response.data[i]._id)\r\n              {\r\n                    setQuiz([response.data[i].title])\r\n                    break;\r\n              }\r\n            }\r\n          }\r\n          );\r\n      }, []);\r\n\r\n    return (\r\n        <span> {quiz} </span>\r\n            \r\n    )\r\n}\r\nexport default QuizDetail","C:\\Users\\Abhijeet\\Desktop\\New folder\\The-Quizzler\\ClientSide\\src\\hooks\\usebasic-input.jsx",[],"C:\\Users\\Abhijeet\\Desktop\\New folder\\The-Quizzler\\ClientSide\\src\\components\\AttempterResults.jsx",["103"],"C:\\Users\\Abhijeet\\Desktop\\New folder\\The-Quizzler\\ClientSide\\src\\components\\ListOfQuizzes.jsx",["104","105"],{"ruleId":"106","replacedBy":"107"},{"ruleId":"108","replacedBy":"109"},{"ruleId":"110","severity":1,"message":"111","line":21,"column":6,"nodeType":"112","endLine":21,"endColumn":8,"suggestions":"113"},{"ruleId":"114","severity":1,"message":"115","line":68,"column":31,"nodeType":"116","messageId":"117","endLine":68,"endColumn":33},{"ruleId":"114","severity":1,"message":"118","line":83,"column":32,"nodeType":"116","messageId":"119","endLine":83,"endColumn":34},{"ruleId":"114","severity":1,"message":"115","line":86,"column":11,"nodeType":"120","messageId":"121","endLine":86,"endColumn":18},{"ruleId":"122","severity":1,"message":"123","line":2,"column":31,"nodeType":"124","messageId":"125","endLine":2,"endColumn":39},{"ruleId":"122","severity":1,"message":"126","line":4,"column":21,"nodeType":"124","messageId":"125","endLine":4,"endColumn":25},{"ruleId":"122","severity":1,"message":"127","line":16,"column":10,"nodeType":"124","messageId":"125","endLine":16,"endColumn":12},{"ruleId":"128","severity":1,"message":"129","line":36,"column":19,"nodeType":"130","messageId":"131","endLine":36,"endColumn":21},{"ruleId":"110","severity":1,"message":"132","line":41,"column":6,"nodeType":"112","endLine":41,"endColumn":8,"suggestions":"133"},{"ruleId":"110","severity":1,"message":"111","line":23,"column":6,"nodeType":"112","endLine":23,"endColumn":8,"suggestions":"134"},{"ruleId":"122","severity":1,"message":"135","line":24,"column":9,"nodeType":"124","messageId":"125","endLine":24,"endColumn":13},{"ruleId":"122","severity":1,"message":"123","line":2,"column":31,"nodeType":"124","messageId":"125","endLine":2,"endColumn":39},{"ruleId":"122","severity":1,"message":"126","line":4,"column":34,"nodeType":"124","messageId":"125","endLine":4,"endColumn":38},{"ruleId":"122","severity":1,"message":"136","line":12,"column":9,"nodeType":"124","messageId":"125","endLine":12,"endColumn":19},{"ruleId":"122","severity":1,"message":"137","line":19,"column":7,"nodeType":"124","messageId":"125","endLine":19,"endColumn":8},{"ruleId":"110","severity":1,"message":"138","line":55,"column":6,"nodeType":"112","endLine":55,"endColumn":8,"suggestions":"139"},{"ruleId":"122","severity":1,"message":"140","line":56,"column":9,"nodeType":"124","messageId":"125","endLine":56,"endColumn":10},{"ruleId":"110","severity":1,"message":"111","line":12,"column":6,"nodeType":"112","endLine":12,"endColumn":8,"suggestions":"141"},{"ruleId":"122","severity":1,"message":"142","line":2,"column":10,"nodeType":"124","messageId":"125","endLine":2,"endColumn":19},{"ruleId":"122","severity":1,"message":"140","line":12,"column":7,"nodeType":"124","messageId":"125","endLine":12,"endColumn":8},{"ruleId":"110","severity":1,"message":"111","line":22,"column":6,"nodeType":"112","endLine":22,"endColumn":8,"suggestions":"143"},{"ruleId":"122","severity":1,"message":"144","line":23,"column":7,"nodeType":"124","messageId":"125","endLine":23,"endColumn":8},{"ruleId":"122","severity":1,"message":"145","line":41,"column":9,"nodeType":"124","messageId":"125","endLine":41,"endColumn":17},{"ruleId":"114","severity":1,"message":"115","line":43,"column":42,"nodeType":"116","messageId":"117","endLine":43,"endColumn":44},{"ruleId":"110","severity":1,"message":"146","line":20,"column":10,"nodeType":"112","endLine":20,"endColumn":12,"suggestions":"147"},{"ruleId":"110","severity":1,"message":"148","line":19,"column":6,"nodeType":"112","endLine":19,"endColumn":8,"suggestions":"149"},{"ruleId":"122","severity":1,"message":"150","line":7,"column":10,"nodeType":"124","messageId":"125","endLine":7,"endColumn":24},{"ruleId":"110","severity":1,"message":"151","line":16,"column":6,"nodeType":"112","endLine":16,"endColumn":8,"suggestions":"152"},"no-native-reassign",["153"],"no-negated-in-lhs",["154"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'params.id'. Either include it or remove the dependency array.","ArrayExpression",["155"],"array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","Array.prototype.map() expects a value to be returned at the end of arrow function.","expectedAtEnd","ReturnStatement","expectedReturnValue","no-unused-vars","'Fragment' is defined but never used.","Identifier","unusedVar","'Link' is defined but never used.","'id' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","React Hook useEffect has missing dependencies: 'params.id' and 'setIsLoggedIn'. Either include them or remove the dependency array.",["156"],["157"],"'data' is assigned a value but never used.","'isLoggedIn' is assigned a value but never used.","'s' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'params.id2'. Either include it or remove the dependency array.",["158"],"'q' is assigned a value but never used.",["159"],"'Component' is defined but never used.",["160"],"'u' is assigned a value but never used.","'getQuizz' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'props.quizId'. Either include it or remove the dependency array.",["161"],"React Hook useEffect has missing dependencies: 'params.hostId' and 'params.quizId'. Either include them or remove the dependency array.",["162"],"'quizzesCreated' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'params.userId'. Either include it or remove the dependency array.",["163"],"no-global-assign","no-unsafe-negation",{"desc":"164","fix":"165"},{"desc":"166","fix":"167"},{"desc":"164","fix":"168"},{"desc":"169","fix":"170"},{"desc":"164","fix":"171"},{"desc":"164","fix":"172"},{"desc":"173","fix":"174"},{"desc":"175","fix":"176"},{"desc":"177","fix":"178"},"Update the dependencies array to be: [params.id]",{"range":"179","text":"180"},"Update the dependencies array to be: [params.id, setIsLoggedIn]",{"range":"181","text":"182"},{"range":"183","text":"180"},"Update the dependencies array to be: [params.id2]",{"range":"184","text":"185"},{"range":"186","text":"180"},{"range":"187","text":"180"},"Update the dependencies array to be: [props.quizId]",{"range":"188","text":"189"},"Update the dependencies array to be: [params.hostId, params.quizId]",{"range":"190","text":"191"},"Update the dependencies array to be: [params.userId]",{"range":"192","text":"193"},[661,663],"[params.id]",[1176,1178],"[params.id, setIsLoggedIn]",[717,719],[1550,1552],"[params.id2]",[322,324],[716,718],[612,614],"[props.quizId]",[502,504],"[params.hostId, params.quizId]",[495,497],"[params.userId]"]